//-----------------------------------------------------
// name: "Foo YC-20 simulation"
// author: "Sampo Savolainen"
// license: "GPL"
// copyright: "(c)Sampo Savolainen 2009"
//
// Code generated with Faust 0.9.20 (http://faust.grame.fr)
//-----------------------------------------------------
/* link with : "" */
#include "polyblep.cpp"
#include <math.h>
#include <cmath>
template <int N> inline float faustpower(float x) 		{ return powf(x,N); } 
template <int N> inline double faustpower(double x) 	{ return pow(x,N); }
template <int N> inline int faustpower(int x) 			{ return faustpower<N/2>(x) * faustpower<N-N/2>(x); } 
template <> 	 inline int faustpower<0>(int x) 		{ return 1; }
template <> 	 inline int faustpower<1>(int x) 		{ return x; }
#include <cmath>
// abs is now predefined
//template<typename T> T abs (T a)			{ return (a<T(0)) ? -a : a; }


inline int		lsr (int x, int n)			{ return int(((unsigned int)x) >> n); }

/******************************************************************************
*******************************************************************************

							       VECTOR INTRINSICS

*******************************************************************************
*******************************************************************************/

//inline void *aligned_calloc(size_t nmemb, size_t size) { return (void*)((unsigned)(calloc((nmemb*size)+15,sizeof(char)))+15 & 0xfffffff0); }
//inline void *aligned_calloc(size_t nmemb, size_t size) { return (void*)((size_t)(calloc((nmemb*size)+15,sizeof(char)))+15 & ~15); }


/******************************************************************************
*******************************************************************************

			ABSTRACT USER INTERFACE

*******************************************************************************
*******************************************************************************/

struct Meta 
{
    void declare (const char*, const char*) {  }
};

//----------------------------------------------------------------
//  abstract definition of a user interface
//----------------------------------------------------------------
            

class UI
{
	bool	fStopped;
public:
		
	UI() : fStopped(false) {}
	virtual ~UI() {}
	
	virtual void addButton(const char* label, float* zone) = 0;
	virtual void addToggleButton(const char* label, float* zone) = 0;
	virtual void addCheckButton(const char* label, float* zone) = 0;
	virtual void addVerticalSlider(const char* label, float* zone, float init, float min, float max, float step) = 0;
	virtual void addHorizontalSlider(const char* label, float* zone, float init, float min, float max, float step) = 0;
	virtual void addNumEntry(const char* label, float* zone, float init, float min, float max, float step) = 0;
	
	virtual void openFrameBox(const char* label) = 0;
	virtual void openTabBox(const char* label) = 0;
	virtual void openHorizontalBox(const char* label) = 0;
	virtual void openVerticalBox(const char* label) = 0;
	virtual void closeBox() = 0;

    virtual void declare(float* zone, const char* key, const char* value) = 0;
};




/******************************************************************************
*******************************************************************************

			    FAUST DSP

*******************************************************************************
*******************************************************************************/



//----------------------------------------------------------------
//  abstract definition of a signal processor
//----------------------------------------------------------------
			
class dsp {
 protected:
	int fSamplingFreq;
 public:
	dsp() {}
	virtual ~dsp() {}

	virtual int getNumInputs() 						= 0;
	virtual int getNumOutputs() 					= 0;
	virtual void buildUserInterface(UI* interface) 	= 0;
	virtual void init(int samplingRate) 			= 0;
 	virtual void compute(int len, float** inputs, float** outputs) 	= 0;
};
		

//----------------------------------------------------------------------------
//  FAUST generated signal processor
//----------------------------------------------------------------------------
		

#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif  

typedef long double quad;

class mydsp : public dsp{
  private:
	FAUSTFLOAT 	fslider0;
	FAUSTFLOAT 	fslider1;
	float 	fConst0;
	float 	fConst1;
	float 	fRec4[2];
	FAUSTFLOAT 	fslider2;
	float 	fRec3[2];
	float 	fRec1[2];
	float 	fRec2[2];
	float 	fConst2;
	float 	fConst3;
	float 	fRec0[2];
	FAUSTFLOAT 	fbutton0;
	FAUSTFLOAT 	fbutton1;
	float 	fRec10[2];
	int 	iRec9[2];
	float 	fVec0[2];
	int 	iRec11[2];
	float 	fVec1[2];
	float 	fRec7[2];
	float 	fConst4;
	float 	fRec6[2];
	float 	fRec5[2];
	FAUSTFLOAT 	fbutton2;
	float 	fRec17[2];
	int 	iRec16[2];
	float 	fVec2[2];
	int 	iRec18[2];
	float 	fVec3[2];
	float 	fRec14[2];
	float 	fRec13[2];
	float 	fRec12[2];
	FAUSTFLOAT 	fbutton3;
	float 	fRec24[2];
	int 	iRec23[2];
	float 	fVec4[2];
	int 	iRec25[2];
	float 	fVec5[2];
	float 	fRec21[2];
	float 	fRec20[2];
	float 	fRec19[2];
	FAUSTFLOAT 	fbutton4;
	float 	fRec31[2];
	int 	iRec30[2];
	float 	fVec6[2];
	int 	iRec32[2];
	float 	fVec7[2];
	float 	fRec28[2];
	float 	fConst5;
	float 	fRec27[2];
	float 	fRec26[2];
	FAUSTFLOAT 	fbutton5;
	float 	fRec38[2];
	int 	iRec37[2];
	float 	fVec8[2];
	int 	iRec39[2];
	float 	fVec9[2];
	float 	fRec35[2];
	float 	fRec34[2];
	float 	fRec33[2];
	FAUSTFLOAT 	fbutton6;
	float 	fRec45[2];
	int 	iRec44[2];
	float 	fVec10[2];
	int 	iRec46[2];
	float 	fVec11[2];
	float 	fRec42[2];
	float 	fRec41[2];
	float 	fRec40[2];
	FAUSTFLOAT 	fbutton7;
	float 	fRec52[2];
	int 	iRec51[2];
	float 	fVec12[2];
	int 	iRec53[2];
	float 	fVec13[2];
	float 	fRec49[2];
	float 	fRec48[2];
	float 	fRec47[2];
	FAUSTFLOAT 	fbutton8;
	float 	fRec59[2];
	int 	iRec58[2];
	float 	fVec14[2];
	float 	fRec56[2];
	float 	fConst6;
	float 	fRec55[2];
	float 	fRec54[2];
	FAUSTFLOAT 	fbutton9;
	int 	iRec64[2];
	float 	fVec15[2];
	float 	fRec62[2];
	float 	fRec61[2];
	float 	fRec60[2];
	FAUSTFLOAT 	fbutton10;
	float 	fRec70[2];
	int 	iRec69[2];
	float 	fVec16[2];
	float 	fRec67[2];
	float 	fRec66[2];
	float 	fRec65[2];
	FAUSTFLOAT 	fbutton11;
	float 	fRec76[2];
	int 	iRec75[2];
	float 	fVec17[2];
	float 	fRec73[2];
	float 	fRec72[2];
	float 	fRec71[2];
	FAUSTFLOAT 	fbutton12;
	float 	fRec82[2];
	int 	iRec81[2];
	float 	fVec18[2];
	float 	fRec79[2];
	float 	fConst7;
	float 	fRec78[2];
	float 	fRec77[2];
	FAUSTFLOAT 	fbutton13;
	float 	fRec85[2];
	float 	fRec84[2];
	float 	fRec83[2];
	FAUSTFLOAT 	fbutton14;
	float 	fRec89[2];
	float 	fRec88[2];
	float 	fRec87[2];
	FAUSTFLOAT 	fbutton15;
	float 	fRec93[2];
	float 	fRec92[2];
	float 	fRec91[2];
	FAUSTFLOAT 	fbutton16;
	float 	fRec97[2];
	float 	fConst8;
	float 	fRec96[2];
	float 	fRec95[2];
	FAUSTFLOAT 	fbutton17;
	float 	fRec101[2];
	float 	fRec100[2];
	float 	fRec99[2];
	FAUSTFLOAT 	fbutton18;
	float 	fRec105[2];
	float 	fRec104[2];
	float 	fRec103[2];
	FAUSTFLOAT 	fbutton19;
	float 	fRec109[2];
	float 	fRec108[2];
	float 	fRec107[2];
	FAUSTFLOAT 	fbutton20;
	int 	iRec115[2];
	float 	fVec19[2];
	float 	fRec113[2];
	float 	fRec112[2];
	float 	fRec111[2];
	FAUSTFLOAT 	fbutton21;
	int 	iRec120[2];
	float 	fVec20[2];
	float 	fRec118[2];
	float 	fConst9;
	float 	fRec117[2];
	float 	fRec116[2];
	FAUSTFLOAT 	fbutton22;
	int 	iRec125[2];
	float 	fVec21[2];
	float 	fRec123[2];
	float 	fRec122[2];
	float 	fRec121[2];
	FAUSTFLOAT 	fbutton23;
	int 	iRec130[2];
	float 	fVec22[2];
	float 	fRec128[2];
	float 	fRec127[2];
	float 	fRec126[2];
	FAUSTFLOAT 	fbutton24;
	int 	iRec135[2];
	float 	fVec23[2];
	float 	fRec133[2];
	float 	fRec132[2];
	float 	fRec131[2];
	FAUSTFLOAT 	fbutton25;
	int 	iRec140[2];
	float 	fVec24[2];
	float 	fRec138[2];
	float 	fConst10;
	float 	fRec137[2];
	float 	fRec136[2];
	FAUSTFLOAT 	fbutton26;
	int 	iRec145[2];
	float 	fVec25[2];
	float 	fRec143[2];
	float 	fRec142[2];
	float 	fRec141[2];
	FAUSTFLOAT 	fbutton27;
	int 	iRec150[2];
	float 	fVec26[2];
	float 	fRec148[2];
	float 	fRec147[2];
	float 	fRec146[2];
	FAUSTFLOAT 	fbutton28;
	int 	iRec155[2];
	float 	fVec27[2];
	float 	fRec153[2];
	float 	fRec152[2];
	float 	fRec151[2];
	FAUSTFLOAT 	fbutton29;
	int 	iRec160[2];
	float 	fVec28[2];
	float 	fRec158[2];
	float 	fConst11;
	float 	fRec157[2];
	float 	fRec156[2];
	FAUSTFLOAT 	fbutton30;
	int 	iRec165[2];
	float 	fVec29[2];
	float 	fRec163[2];
	float 	fRec162[2];
	float 	fRec161[2];
	FAUSTFLOAT 	fbutton31;
	int 	iRec170[2];
	float 	fVec30[2];
	float 	fRec168[2];
	float 	fRec167[2];
	float 	fRec166[2];
	FAUSTFLOAT 	fbutton32;
	int 	iRec175[2];
	float 	fVec31[2];
	float 	fRec173[2];
	float 	fRec172[2];
	float 	fRec171[2];
	FAUSTFLOAT 	fbutton33;
	int 	iRec180[2];
	float 	fVec32[2];
	float 	fRec178[2];
	float 	fConst12;
	float 	fRec177[2];
	float 	fRec176[2];
	FAUSTFLOAT 	fbutton34;
	int 	iRec185[2];
	float 	fVec33[2];
	float 	fRec183[2];
	float 	fRec182[2];
	float 	fRec181[2];
	FAUSTFLOAT 	fbutton35;
	int 	iRec190[2];
	float 	fVec34[2];
	float 	fRec188[2];
	float 	fRec187[2];
	float 	fRec186[2];
	FAUSTFLOAT 	fbutton36;
	int 	iRec195[2];
	float 	fVec35[2];
	float 	fRec193[2];
	float 	fRec192[2];
	float 	fRec191[2];
	FAUSTFLOAT 	fbutton37;
	FAUSTFLOAT 	fslider3;
	float 	fRec197[2];
	float 	fRec198[2];
	float 	fRec196[2];
	FAUSTFLOAT 	fbutton38;
	FAUSTFLOAT 	fbutton39;
	float 	fRec200[2];
	float 	fRec201[2];
	float 	fRec199[2];
	FAUSTFLOAT 	fbutton40;
	FAUSTFLOAT 	fbutton41;
	float 	fRec203[2];
	float 	fRec204[2];
	float 	fRec202[2];
	FAUSTFLOAT 	fbutton42;
	FAUSTFLOAT 	fbutton43;
	float 	fRec206[2];
	float 	fRec207[2];
	float 	fRec205[2];
	FAUSTFLOAT 	fbutton44;
	FAUSTFLOAT 	fbutton45;
	float 	fRec209[2];
	float 	fRec210[2];
	float 	fRec208[2];
	FAUSTFLOAT 	fbutton46;
	FAUSTFLOAT 	fbutton47;
	float 	fRec212[2];
	float 	fRec213[2];
	float 	fRec211[2];
	FAUSTFLOAT 	fbutton48;
	FAUSTFLOAT 	fbutton49;
	float 	fRec215[2];
	float 	fRec216[2];
	float 	fRec214[2];
	FAUSTFLOAT 	fbutton50;
	FAUSTFLOAT 	fbutton51;
	float 	fRec218[2];
	float 	fRec219[2];
	float 	fRec217[2];
	FAUSTFLOAT 	fbutton52;
	FAUSTFLOAT 	fbutton53;
	float 	fRec221[2];
	float 	fRec222[2];
	float 	fRec220[2];
	FAUSTFLOAT 	fbutton54;
	FAUSTFLOAT 	fbutton55;
	float 	fRec224[2];
	float 	fRec225[2];
	float 	fRec223[2];
	FAUSTFLOAT 	fbutton56;
	FAUSTFLOAT 	fbutton57;
	float 	fRec227[2];
	float 	fRec228[2];
	float 	fRec226[2];
	FAUSTFLOAT 	fbutton58;
	FAUSTFLOAT 	fbutton59;
	FAUSTFLOAT 	fbutton60;
	int 	iRec233[2];
	float 	fVec36[2];
	int 	iRec234[2];
	float 	fVec37[2];
	int 	iRec235[2];
	float 	fVec38[2];
	float 	fRec231[2];
	float 	fConst13;
	float 	fRec230[2];
	float 	fConst14;
	float 	fRec229[2];
	int 	iRec240[2];
	float 	fVec39[2];
	int 	iRec241[2];
	float 	fVec40[2];
	int 	iRec242[2];
	float 	fVec41[2];
	float 	fRec238[2];
	float 	fRec237[2];
	float 	fRec236[2];
	int 	iRec247[2];
	float 	fVec42[2];
	int 	iRec248[2];
	float 	fVec43[2];
	int 	iRec249[2];
	float 	fVec44[2];
	float 	fRec245[2];
	float 	fRec244[2];
	float 	fRec243[2];
	int 	iRec254[2];
	float 	fVec45[2];
	int 	iRec255[2];
	float 	fVec46[2];
	int 	iRec256[2];
	float 	fVec47[2];
	float 	fRec252[2];
	float 	fConst15;
	float 	fRec251[2];
	float 	fRec250[2];
	int 	iRec261[2];
	float 	fVec48[2];
	int 	iRec262[2];
	float 	fVec49[2];
	int 	iRec263[2];
	float 	fVec50[2];
	float 	fRec259[2];
	float 	fRec258[2];
	float 	fRec257[2];
	int 	iRec268[2];
	float 	fVec51[2];
	int 	iRec269[2];
	float 	fVec52[2];
	int 	iRec270[2];
	float 	fVec53[2];
	float 	fRec266[2];
	float 	fRec265[2];
	float 	fRec264[2];
	int 	iRec275[2];
	float 	fVec54[2];
	int 	iRec276[2];
	float 	fVec55[2];
	int 	iRec277[2];
	float 	fVec56[2];
	float 	fRec273[2];
	float 	fRec272[2];
	float 	fRec271[2];
	int 	iRec282[2];
	float 	fVec57[2];
	int 	iRec283[2];
	float 	fVec58[2];
	float 	fRec280[2];
	float 	fRec279[2];
	float 	fConst16;
	float 	fRec278[2];
	int 	iRec288[2];
	float 	fVec59[2];
	int 	iRec289[2];
	float 	fVec60[2];
	float 	fRec286[2];
	float 	fRec285[2];
	float 	fRec284[2];
	int 	iRec294[2];
	float 	fVec61[2];
	int 	iRec295[2];
	float 	fVec62[2];
	float 	fRec292[2];
	float 	fRec291[2];
	float 	fRec290[2];
	int 	iRec300[2];
	float 	fVec63[2];
	int 	iRec301[2];
	float 	fVec64[2];
	float 	fRec298[2];
	float 	fRec297[2];
	float 	fRec296[2];
	int 	iRec306[2];
	float 	fVec65[2];
	int 	iRec307[2];
	float 	fVec66[2];
	float 	fRec304[2];
	float 	fConst17;
	float 	fRec303[2];
	float 	fRec302[2];
	float 	fRec310[2];
	float 	fRec309[2];
	float 	fRec308[2];
	float 	fRec314[2];
	float 	fRec313[2];
	float 	fRec312[2];
	float 	fRec318[2];
	float 	fRec317[2];
	float 	fRec316[2];
	float 	fRec322[2];
	float 	fConst18;
	float 	fRec321[2];
	float 	fRec320[2];
	float 	fRec326[2];
	float 	fRec325[2];
	float 	fRec324[2];
	float 	fRec330[2];
	float 	fRec329[2];
	float 	fRec328[2];
	float 	fRec334[2];
	float 	fRec333[2];
	float 	fRec332[2];
	float 	fRec338[2];
	float 	fConst19;
	float 	fRec337[2];
	float 	fRec336[2];
	float 	fRec342[2];
	float 	fRec341[2];
	float 	fRec340[2];
	float 	fRec346[2];
	float 	fRec345[2];
	float 	fRec344[2];
	float 	fRec350[2];
	float 	fRec349[2];
	float 	fRec348[2];
	float 	fRec354[2];
	float 	fConst20;
	float 	fRec353[2];
	float 	fRec352[2];
	float 	fRec358[2];
	float 	fRec357[2];
	float 	fRec356[2];
	float 	fRec362[2];
	float 	fRec361[2];
	float 	fRec360[2];
	float 	fRec366[2];
	float 	fRec365[2];
	float 	fRec364[2];
	float 	fRec370[2];
	float 	fConst21;
	float 	fRec369[2];
	float 	fRec368[2];
	float 	fRec374[2];
	float 	fRec373[2];
	float 	fRec372[2];
	float 	fRec378[2];
	float 	fRec377[2];
	float 	fRec376[2];
	float 	fRec382[2];
	float 	fRec381[2];
	float 	fRec380[2];
	int 	iRec388[2];
	float 	fVec67[2];
	float 	fRec386[2];
	float 	fRec385[2];
	float 	fRec384[2];
	int 	iRec393[2];
	float 	fVec68[2];
	float 	fRec391[2];
	float 	fConst22;
	float 	fRec390[2];
	float 	fRec389[2];
	int 	iRec398[2];
	float 	fVec69[2];
	float 	fRec396[2];
	float 	fRec395[2];
	float 	fRec394[2];
	int 	iRec403[2];
	float 	fVec70[2];
	float 	fRec401[2];
	float 	fRec400[2];
	float 	fRec399[2];
	int 	iRec408[2];
	float 	fVec71[2];
	float 	fRec406[2];
	float 	fRec405[2];
	float 	fRec404[2];
	int 	iRec413[2];
	float 	fVec72[2];
	float 	fRec411[2];
	float 	fRec410[2];
	float 	fConst23;
	float 	fRec409[2];
	int 	iRec418[2];
	float 	fVec73[2];
	float 	fRec416[2];
	float 	fRec415[2];
	float 	fRec414[2];
	int 	iRec423[2];
	float 	fVec74[2];
	float 	fRec421[2];
	float 	fRec420[2];
	float 	fRec419[2];
	int 	iRec428[2];
	float 	fVec75[2];
	float 	fRec426[2];
	float 	fRec425[2];
	float 	fRec424[2];
	int 	iRec433[2];
	float 	fVec76[2];
	float 	fRec431[2];
	float 	fConst24;
	float 	fRec430[2];
	float 	fRec429[2];
	int 	iRec438[2];
	float 	fVec77[2];
	float 	fRec436[2];
	float 	fRec435[2];
	float 	fRec434[2];
	int 	iRec443[2];
	float 	fVec78[2];
	float 	fRec441[2];
	float 	fRec440[2];
	float 	fRec439[2];
	int 	iRec448[2];
	float 	fVec79[2];
	float 	fRec446[2];
	float 	fRec445[2];
	float 	fRec444[2];
	int 	iRec453[2];
	float 	fVec80[2];
	float 	fRec451[2];
	float 	fRec450[2];
	float 	fRec449[2];
	int 	iRec458[2];
	float 	fVec81[2];
	float 	fRec456[2];
	float 	fRec455[2];
	float 	fRec454[2];
	int 	iRec463[2];
	float 	fVec82[2];
	float 	fRec461[2];
	float 	fRec460[2];
	float 	fRec459[2];
	int 	iRec468[2];
	float 	fVec83[2];
	float 	fRec466[2];
	float 	fRec465[2];
	float 	fRec464[2];
	float 	fConst25;
	float 	fConst26;
	int 	iConst27;
	int 	iConst28;
	float 	fConst29;
	float 	fRec470[2];
	float 	fVec84[2];
	float 	fRec469[2];
	float 	fConst30;
	float 	fVec85[5];
	FAUSTFLOAT 	fslider4;
	FAUSTFLOAT 	fslider5;
	float 	fRec471[2];
	FAUSTFLOAT 	fslider6;
	FAUSTFLOAT 	fslider7;
	float 	fConst31;
	float 	fRec472[2];
	FAUSTFLOAT 	fslider8;
	float 	fVec86[2];
	float 	fConst32;
	float 	fRec474[2];
	float 	fVec87[2];
	float 	fConst33;
	float 	fRec473[2];
	FAUSTFLOAT 	fslider9;
	float 	fVec88[2];
	float 	fConst34;
	float 	fRec476[2];
	float 	fVec89[2];
	float 	fConst35;
	float 	fRec475[2];
	FAUSTFLOAT 	fslider10;
	float 	fVec90[2];
	float 	fConst36;
	float 	fRec478[2];
	float 	fVec91[2];
	float 	fConst37;
	float 	fRec477[2];
	FAUSTFLOAT 	fslider11;
	float 	fVec92[2];
	float 	fConst38;
	float 	fRec480[2];
	float 	fVec93[2];
	float 	fConst39;
	float 	fRec479[2];
	FAUSTFLOAT 	fslider12;
	float 	fRec482[2];
	float 	fRec481[2];
	float 	fRec484[2];
	float 	fRec483[2];
	float 	fRec486[2];
	float 	fRec485[2];
	float 	fRec488[2];
	float 	fRec487[2];
	FAUSTFLOAT 	fslider13;
	FAUSTFLOAT 	fslider14;
	FAUSTFLOAT 	fslider15;
	FAUSTFLOAT 	fslider16;
	FAUSTFLOAT 	fslider17;
	FAUSTFLOAT 	fslider18;
	FAUSTFLOAT 	fslider19;
	FAUSTFLOAT 	fslider20;
	FAUSTFLOAT 	fslider21;
	float 	fRec489[2];
  public:
	static void metadata(Meta* m) 	{ 
		m->declare("name", "Foo YC-20 simulation");
		m->declare("author", "Sampo Savolainen");
		m->declare("license", "GPL");
		m->declare("copyright", "(c)Sampo Savolainen 2009");
	}

	virtual int getNumInputs() 	{ return 0; }
	virtual int getNumOutputs() 	{ return 1; }
	static void classInit(int samplingFreq) {
	}
	virtual void instanceInit(int samplingFreq) {
		fSamplingFreq = samplingFreq;
		fslider0 = 0.0f;
		fslider1 = 0.0f;
		fConst0 = float(fSamplingFreq);
		fConst1 = (1.0f / fConst0);
		for (int i=0; i<2; i++) fRec4[i] = 0;
		fslider2 = 0.0f;
		for (int i=0; i<2; i++) fRec3[i] = 0;
		for (int i=0; i<2; i++) fRec1[i] = 0;
		for (int i=0; i<2; i++) fRec2[i] = 0;
		fConst2 = (1.0f / fSamplingFreq);
		fConst3 = (0.007374545454545454f / (fConst2 + 0.007374545454545454f));
		for (int i=0; i<2; i++) fRec0[i] = 0;
		fbutton0 = 0.0;
		fbutton1 = 0.0;
		for (int i=0; i<2; i++) fRec10[i] = 0;
		for (int i=0; i<2; i++) iRec9[i] = 0;
		for (int i=0; i<2; i++) fVec0[i] = 0;
		for (int i=0; i<2; i++) iRec11[i] = 0;
		for (int i=0; i<2; i++) fVec1[i] = 0;
		for (int i=0; i<2; i++) fRec7[i] = 0;
		fConst4 = (12195.121951219513f / fSamplingFreq);
		for (int i=0; i<2; i++) fRec6[i] = 0;
		for (int i=0; i<2; i++) fRec5[i] = 0;
		fbutton2 = 0.0;
		for (int i=0; i<2; i++) fRec17[i] = 0;
		for (int i=0; i<2; i++) iRec16[i] = 0;
		for (int i=0; i<2; i++) fVec2[i] = 0;
		for (int i=0; i<2; i++) iRec18[i] = 0;
		for (int i=0; i<2; i++) fVec3[i] = 0;
		for (int i=0; i<2; i++) fRec14[i] = 0;
		for (int i=0; i<2; i++) fRec13[i] = 0;
		for (int i=0; i<2; i++) fRec12[i] = 0;
		fbutton3 = 0.0;
		for (int i=0; i<2; i++) fRec24[i] = 0;
		for (int i=0; i<2; i++) iRec23[i] = 0;
		for (int i=0; i<2; i++) fVec4[i] = 0;
		for (int i=0; i<2; i++) iRec25[i] = 0;
		for (int i=0; i<2; i++) fVec5[i] = 0;
		for (int i=0; i<2; i++) fRec21[i] = 0;
		for (int i=0; i<2; i++) fRec20[i] = 0;
		for (int i=0; i<2; i++) fRec19[i] = 0;
		fbutton4 = 0.0;
		for (int i=0; i<2; i++) fRec31[i] = 0;
		for (int i=0; i<2; i++) iRec30[i] = 0;
		for (int i=0; i<2; i++) fVec6[i] = 0;
		for (int i=0; i<2; i++) iRec32[i] = 0;
		for (int i=0; i<2; i++) fVec7[i] = 0;
		for (int i=0; i<2; i++) fRec28[i] = 0;
		fConst5 = (17857.14285714286f / fSamplingFreq);
		for (int i=0; i<2; i++) fRec27[i] = 0;
		for (int i=0; i<2; i++) fRec26[i] = 0;
		fbutton5 = 0.0;
		for (int i=0; i<2; i++) fRec38[i] = 0;
		for (int i=0; i<2; i++) iRec37[i] = 0;
		for (int i=0; i<2; i++) fVec8[i] = 0;
		for (int i=0; i<2; i++) iRec39[i] = 0;
		for (int i=0; i<2; i++) fVec9[i] = 0;
		for (int i=0; i<2; i++) fRec35[i] = 0;
		for (int i=0; i<2; i++) fRec34[i] = 0;
		for (int i=0; i<2; i++) fRec33[i] = 0;
		fbutton6 = 0.0;
		for (int i=0; i<2; i++) fRec45[i] = 0;
		for (int i=0; i<2; i++) iRec44[i] = 0;
		for (int i=0; i<2; i++) fVec10[i] = 0;
		for (int i=0; i<2; i++) iRec46[i] = 0;
		for (int i=0; i<2; i++) fVec11[i] = 0;
		for (int i=0; i<2; i++) fRec42[i] = 0;
		for (int i=0; i<2; i++) fRec41[i] = 0;
		for (int i=0; i<2; i++) fRec40[i] = 0;
		fbutton7 = 0.0;
		for (int i=0; i<2; i++) fRec52[i] = 0;
		for (int i=0; i<2; i++) iRec51[i] = 0;
		for (int i=0; i<2; i++) fVec12[i] = 0;
		for (int i=0; i<2; i++) iRec53[i] = 0;
		for (int i=0; i<2; i++) fVec13[i] = 0;
		for (int i=0; i<2; i++) fRec49[i] = 0;
		for (int i=0; i<2; i++) fRec48[i] = 0;
		for (int i=0; i<2; i++) fRec47[i] = 0;
		fbutton8 = 0.0;
		for (int i=0; i<2; i++) fRec59[i] = 0;
		for (int i=0; i<2; i++) iRec58[i] = 0;
		for (int i=0; i<2; i++) fVec14[i] = 0;
		for (int i=0; i<2; i++) fRec56[i] = 0;
		fConst6 = (21276.59574468085f / fSamplingFreq);
		for (int i=0; i<2; i++) fRec55[i] = 0;
		for (int i=0; i<2; i++) fRec54[i] = 0;
		fbutton9 = 0.0;
		for (int i=0; i<2; i++) iRec64[i] = 0;
		for (int i=0; i<2; i++) fVec15[i] = 0;
		for (int i=0; i<2; i++) fRec62[i] = 0;
		for (int i=0; i<2; i++) fRec61[i] = 0;
		for (int i=0; i<2; i++) fRec60[i] = 0;
		fbutton10 = 0.0;
		for (int i=0; i<2; i++) fRec70[i] = 0;
		for (int i=0; i<2; i++) iRec69[i] = 0;
		for (int i=0; i<2; i++) fVec16[i] = 0;
		for (int i=0; i<2; i++) fRec67[i] = 0;
		for (int i=0; i<2; i++) fRec66[i] = 0;
		for (int i=0; i<2; i++) fRec65[i] = 0;
		fbutton11 = 0.0;
		for (int i=0; i<2; i++) fRec76[i] = 0;
		for (int i=0; i<2; i++) iRec75[i] = 0;
		for (int i=0; i<2; i++) fVec17[i] = 0;
		for (int i=0; i<2; i++) fRec73[i] = 0;
		for (int i=0; i<2; i++) fRec72[i] = 0;
		for (int i=0; i<2; i++) fRec71[i] = 0;
		fbutton12 = 0.0;
		for (int i=0; i<2; i++) fRec82[i] = 0;
		for (int i=0; i<2; i++) iRec81[i] = 0;
		for (int i=0; i<2; i++) fVec18[i] = 0;
		for (int i=0; i<2; i++) fRec79[i] = 0;
		fConst7 = (25641.02564102564f / fSamplingFreq);
		for (int i=0; i<2; i++) fRec78[i] = 0;
		for (int i=0; i<2; i++) fRec77[i] = 0;
		fbutton13 = 0.0;
		for (int i=0; i<2; i++) fRec85[i] = 0;
		for (int i=0; i<2; i++) fRec84[i] = 0;
		for (int i=0; i<2; i++) fRec83[i] = 0;
		fbutton14 = 0.0;
		for (int i=0; i<2; i++) fRec89[i] = 0;
		for (int i=0; i<2; i++) fRec88[i] = 0;
		for (int i=0; i<2; i++) fRec87[i] = 0;
		fbutton15 = 0.0;
		for (int i=0; i<2; i++) fRec93[i] = 0;
		for (int i=0; i<2; i++) fRec92[i] = 0;
		for (int i=0; i<2; i++) fRec91[i] = 0;
		fbutton16 = 0.0;
		for (int i=0; i<2; i++) fRec97[i] = 0;
		fConst8 = (37037.03703703704f / fSamplingFreq);
		for (int i=0; i<2; i++) fRec96[i] = 0;
		for (int i=0; i<2; i++) fRec95[i] = 0;
		fbutton17 = 0.0;
		for (int i=0; i<2; i++) fRec101[i] = 0;
		for (int i=0; i<2; i++) fRec100[i] = 0;
		for (int i=0; i<2; i++) fRec99[i] = 0;
		fbutton18 = 0.0;
		for (int i=0; i<2; i++) fRec105[i] = 0;
		for (int i=0; i<2; i++) fRec104[i] = 0;
		for (int i=0; i<2; i++) fRec103[i] = 0;
		fbutton19 = 0.0;
		for (int i=0; i<2; i++) fRec109[i] = 0;
		for (int i=0; i<2; i++) fRec108[i] = 0;
		for (int i=0; i<2; i++) fRec107[i] = 0;
		fbutton20 = 0.0;
		for (int i=0; i<2; i++) iRec115[i] = 0;
		for (int i=0; i<2; i++) fVec19[i] = 0;
		for (int i=0; i<2; i++) fRec113[i] = 0;
		for (int i=0; i<2; i++) fRec112[i] = 0;
		for (int i=0; i<2; i++) fRec111[i] = 0;
		fbutton21 = 0.0;
		for (int i=0; i<2; i++) iRec120[i] = 0;
		for (int i=0; i<2; i++) fVec20[i] = 0;
		for (int i=0; i<2; i++) fRec118[i] = 0;
		fConst9 = (1e+04f / fSamplingFreq);
		for (int i=0; i<2; i++) fRec117[i] = 0;
		for (int i=0; i<2; i++) fRec116[i] = 0;
		fbutton22 = 0.0;
		for (int i=0; i<2; i++) iRec125[i] = 0;
		for (int i=0; i<2; i++) fVec21[i] = 0;
		for (int i=0; i<2; i++) fRec123[i] = 0;
		for (int i=0; i<2; i++) fRec122[i] = 0;
		for (int i=0; i<2; i++) fRec121[i] = 0;
		fbutton23 = 0.0;
		for (int i=0; i<2; i++) iRec130[i] = 0;
		for (int i=0; i<2; i++) fVec22[i] = 0;
		for (int i=0; i<2; i++) fRec128[i] = 0;
		for (int i=0; i<2; i++) fRec127[i] = 0;
		for (int i=0; i<2; i++) fRec126[i] = 0;
		fbutton24 = 0.0;
		for (int i=0; i<2; i++) iRec135[i] = 0;
		for (int i=0; i<2; i++) fVec23[i] = 0;
		for (int i=0; i<2; i++) fRec133[i] = 0;
		for (int i=0; i<2; i++) fRec132[i] = 0;
		for (int i=0; i<2; i++) fRec131[i] = 0;
		fbutton25 = 0.0;
		for (int i=0; i<2; i++) iRec140[i] = 0;
		for (int i=0; i<2; i++) fVec24[i] = 0;
		for (int i=0; i<2; i++) fRec138[i] = 0;
		fConst10 = (8333.333333333334f / fSamplingFreq);
		for (int i=0; i<2; i++) fRec137[i] = 0;
		for (int i=0; i<2; i++) fRec136[i] = 0;
		fbutton26 = 0.0;
		for (int i=0; i<2; i++) iRec145[i] = 0;
		for (int i=0; i<2; i++) fVec25[i] = 0;
		for (int i=0; i<2; i++) fRec143[i] = 0;
		for (int i=0; i<2; i++) fRec142[i] = 0;
		for (int i=0; i<2; i++) fRec141[i] = 0;
		fbutton27 = 0.0;
		for (int i=0; i<2; i++) iRec150[i] = 0;
		for (int i=0; i<2; i++) fVec26[i] = 0;
		for (int i=0; i<2; i++) fRec148[i] = 0;
		for (int i=0; i<2; i++) fRec147[i] = 0;
		for (int i=0; i<2; i++) fRec146[i] = 0;
		fbutton28 = 0.0;
		for (int i=0; i<2; i++) iRec155[i] = 0;
		for (int i=0; i<2; i++) fVec27[i] = 0;
		for (int i=0; i<2; i++) fRec153[i] = 0;
		for (int i=0; i<2; i++) fRec152[i] = 0;
		for (int i=0; i<2; i++) fRec151[i] = 0;
		fbutton29 = 0.0;
		for (int i=0; i<2; i++) iRec160[i] = 0;
		for (int i=0; i<2; i++) fVec28[i] = 0;
		for (int i=0; i<2; i++) fRec158[i] = 0;
		fConst11 = (5555.555555555556f / fSamplingFreq);
		for (int i=0; i<2; i++) fRec157[i] = 0;
		for (int i=0; i<2; i++) fRec156[i] = 0;
		fbutton30 = 0.0;
		for (int i=0; i<2; i++) iRec165[i] = 0;
		for (int i=0; i<2; i++) fVec29[i] = 0;
		for (int i=0; i<2; i++) fRec163[i] = 0;
		for (int i=0; i<2; i++) fRec162[i] = 0;
		for (int i=0; i<2; i++) fRec161[i] = 0;
		fbutton31 = 0.0;
		for (int i=0; i<2; i++) iRec170[i] = 0;
		for (int i=0; i<2; i++) fVec30[i] = 0;
		for (int i=0; i<2; i++) fRec168[i] = 0;
		for (int i=0; i<2; i++) fRec167[i] = 0;
		for (int i=0; i<2; i++) fRec166[i] = 0;
		fbutton32 = 0.0;
		for (int i=0; i<2; i++) iRec175[i] = 0;
		for (int i=0; i<2; i++) fVec31[i] = 0;
		for (int i=0; i<2; i++) fRec173[i] = 0;
		for (int i=0; i<2; i++) fRec172[i] = 0;
		for (int i=0; i<2; i++) fRec171[i] = 0;
		fbutton33 = 0.0;
		for (int i=0; i<2; i++) iRec180[i] = 0;
		for (int i=0; i<2; i++) fVec32[i] = 0;
		for (int i=0; i<2; i++) fRec178[i] = 0;
		fConst12 = (4545.454545454545f / fSamplingFreq);
		for (int i=0; i<2; i++) fRec177[i] = 0;
		for (int i=0; i<2; i++) fRec176[i] = 0;
		fbutton34 = 0.0;
		for (int i=0; i<2; i++) iRec185[i] = 0;
		for (int i=0; i<2; i++) fVec33[i] = 0;
		for (int i=0; i<2; i++) fRec183[i] = 0;
		for (int i=0; i<2; i++) fRec182[i] = 0;
		for (int i=0; i<2; i++) fRec181[i] = 0;
		fbutton35 = 0.0;
		for (int i=0; i<2; i++) iRec190[i] = 0;
		for (int i=0; i<2; i++) fVec34[i] = 0;
		for (int i=0; i<2; i++) fRec188[i] = 0;
		for (int i=0; i<2; i++) fRec187[i] = 0;
		for (int i=0; i<2; i++) fRec186[i] = 0;
		fbutton36 = 0.0;
		for (int i=0; i<2; i++) iRec195[i] = 0;
		for (int i=0; i<2; i++) fVec35[i] = 0;
		for (int i=0; i<2; i++) fRec193[i] = 0;
		for (int i=0; i<2; i++) fRec192[i] = 0;
		for (int i=0; i<2; i++) fRec191[i] = 0;
		fbutton37 = 0.0;
		fslider3 = 0.0f;
		for (int i=0; i<2; i++) fRec197[i] = 0;
		for (int i=0; i<2; i++) fRec198[i] = 0;
		for (int i=0; i<2; i++) fRec196[i] = 0;
		fbutton38 = 0.0;
		fbutton39 = 0.0;
		for (int i=0; i<2; i++) fRec200[i] = 0;
		for (int i=0; i<2; i++) fRec201[i] = 0;
		for (int i=0; i<2; i++) fRec199[i] = 0;
		fbutton40 = 0.0;
		fbutton41 = 0.0;
		for (int i=0; i<2; i++) fRec203[i] = 0;
		for (int i=0; i<2; i++) fRec204[i] = 0;
		for (int i=0; i<2; i++) fRec202[i] = 0;
		fbutton42 = 0.0;
		fbutton43 = 0.0;
		for (int i=0; i<2; i++) fRec206[i] = 0;
		for (int i=0; i<2; i++) fRec207[i] = 0;
		for (int i=0; i<2; i++) fRec205[i] = 0;
		fbutton44 = 0.0;
		fbutton45 = 0.0;
		for (int i=0; i<2; i++) fRec209[i] = 0;
		for (int i=0; i<2; i++) fRec210[i] = 0;
		for (int i=0; i<2; i++) fRec208[i] = 0;
		fbutton46 = 0.0;
		fbutton47 = 0.0;
		for (int i=0; i<2; i++) fRec212[i] = 0;
		for (int i=0; i<2; i++) fRec213[i] = 0;
		for (int i=0; i<2; i++) fRec211[i] = 0;
		fbutton48 = 0.0;
		fbutton49 = 0.0;
		for (int i=0; i<2; i++) fRec215[i] = 0;
		for (int i=0; i<2; i++) fRec216[i] = 0;
		for (int i=0; i<2; i++) fRec214[i] = 0;
		fbutton50 = 0.0;
		fbutton51 = 0.0;
		for (int i=0; i<2; i++) fRec218[i] = 0;
		for (int i=0; i<2; i++) fRec219[i] = 0;
		for (int i=0; i<2; i++) fRec217[i] = 0;
		fbutton52 = 0.0;
		fbutton53 = 0.0;
		for (int i=0; i<2; i++) fRec221[i] = 0;
		for (int i=0; i<2; i++) fRec222[i] = 0;
		for (int i=0; i<2; i++) fRec220[i] = 0;
		fbutton54 = 0.0;
		fbutton55 = 0.0;
		for (int i=0; i<2; i++) fRec224[i] = 0;
		for (int i=0; i<2; i++) fRec225[i] = 0;
		for (int i=0; i<2; i++) fRec223[i] = 0;
		fbutton56 = 0.0;
		fbutton57 = 0.0;
		for (int i=0; i<2; i++) fRec227[i] = 0;
		for (int i=0; i<2; i++) fRec228[i] = 0;
		for (int i=0; i<2; i++) fRec226[i] = 0;
		fbutton58 = 0.0;
		fbutton59 = 0.0;
		fbutton60 = 0.0;
		for (int i=0; i<2; i++) iRec233[i] = 0;
		for (int i=0; i<2; i++) fVec36[i] = 0;
		for (int i=0; i<2; i++) iRec234[i] = 0;
		for (int i=0; i<2; i++) fVec37[i] = 0;
		for (int i=0; i<2; i++) iRec235[i] = 0;
		for (int i=0; i<2; i++) fVec38[i] = 0;
		for (int i=0; i<2; i++) fRec231[i] = 0;
		fConst13 = (1e+03f / fSamplingFreq);
		for (int i=0; i<2; i++) fRec230[i] = 0;
		fConst14 = (0.00223066398390342f / (fConst2 + 0.00223066398390342f));
		for (int i=0; i<2; i++) fRec229[i] = 0;
		for (int i=0; i<2; i++) iRec240[i] = 0;
		for (int i=0; i<2; i++) fVec39[i] = 0;
		for (int i=0; i<2; i++) iRec241[i] = 0;
		for (int i=0; i<2; i++) fVec40[i] = 0;
		for (int i=0; i<2; i++) iRec242[i] = 0;
		for (int i=0; i<2; i++) fVec41[i] = 0;
		for (int i=0; i<2; i++) fRec238[i] = 0;
		for (int i=0; i<2; i++) fRec237[i] = 0;
		for (int i=0; i<2; i++) fRec236[i] = 0;
		for (int i=0; i<2; i++) iRec247[i] = 0;
		for (int i=0; i<2; i++) fVec42[i] = 0;
		for (int i=0; i<2; i++) iRec248[i] = 0;
		for (int i=0; i<2; i++) fVec43[i] = 0;
		for (int i=0; i<2; i++) iRec249[i] = 0;
		for (int i=0; i<2; i++) fVec44[i] = 0;
		for (int i=0; i<2; i++) fRec245[i] = 0;
		for (int i=0; i<2; i++) fRec244[i] = 0;
		for (int i=0; i<2; i++) fRec243[i] = 0;
		for (int i=0; i<2; i++) iRec254[i] = 0;
		for (int i=0; i<2; i++) fVec45[i] = 0;
		for (int i=0; i<2; i++) iRec255[i] = 0;
		for (int i=0; i<2; i++) fVec46[i] = 0;
		for (int i=0; i<2; i++) iRec256[i] = 0;
		for (int i=0; i<2; i++) fVec47[i] = 0;
		for (int i=0; i<2; i++) fRec252[i] = 0;
		fConst15 = (1219.5121951219512f / fSamplingFreq);
		for (int i=0; i<2; i++) fRec251[i] = 0;
		for (int i=0; i<2; i++) fRec250[i] = 0;
		for (int i=0; i<2; i++) iRec261[i] = 0;
		for (int i=0; i<2; i++) fVec48[i] = 0;
		for (int i=0; i<2; i++) iRec262[i] = 0;
		for (int i=0; i<2; i++) fVec49[i] = 0;
		for (int i=0; i<2; i++) iRec263[i] = 0;
		for (int i=0; i<2; i++) fVec50[i] = 0;
		for (int i=0; i<2; i++) fRec259[i] = 0;
		for (int i=0; i<2; i++) fRec258[i] = 0;
		for (int i=0; i<2; i++) fRec257[i] = 0;
		for (int i=0; i<2; i++) iRec268[i] = 0;
		for (int i=0; i<2; i++) fVec51[i] = 0;
		for (int i=0; i<2; i++) iRec269[i] = 0;
		for (int i=0; i<2; i++) fVec52[i] = 0;
		for (int i=0; i<2; i++) iRec270[i] = 0;
		for (int i=0; i<2; i++) fVec53[i] = 0;
		for (int i=0; i<2; i++) fRec266[i] = 0;
		for (int i=0; i<2; i++) fRec265[i] = 0;
		for (int i=0; i<2; i++) fRec264[i] = 0;
		for (int i=0; i<2; i++) iRec275[i] = 0;
		for (int i=0; i<2; i++) fVec54[i] = 0;
		for (int i=0; i<2; i++) iRec276[i] = 0;
		for (int i=0; i<2; i++) fVec55[i] = 0;
		for (int i=0; i<2; i++) iRec277[i] = 0;
		for (int i=0; i<2; i++) fVec56[i] = 0;
		for (int i=0; i<2; i++) fRec273[i] = 0;
		for (int i=0; i<2; i++) fRec272[i] = 0;
		for (int i=0; i<2; i++) fRec271[i] = 0;
		for (int i=0; i<2; i++) iRec282[i] = 0;
		for (int i=0; i<2; i++) fVec57[i] = 0;
		for (int i=0; i<2; i++) iRec283[i] = 0;
		for (int i=0; i<2; i++) fVec58[i] = 0;
		for (int i=0; i<2; i++) fRec280[i] = 0;
		for (int i=0; i<2; i++) fRec279[i] = 0;
		fConst16 = (0.003596453201970443f / (fConst2 + 0.003596453201970443f));
		for (int i=0; i<2; i++) fRec278[i] = 0;
		for (int i=0; i<2; i++) iRec288[i] = 0;
		for (int i=0; i<2; i++) fVec59[i] = 0;
		for (int i=0; i<2; i++) iRec289[i] = 0;
		for (int i=0; i<2; i++) fVec60[i] = 0;
		for (int i=0; i<2; i++) fRec286[i] = 0;
		for (int i=0; i<2; i++) fRec285[i] = 0;
		for (int i=0; i<2; i++) fRec284[i] = 0;
		for (int i=0; i<2; i++) iRec294[i] = 0;
		for (int i=0; i<2; i++) fVec61[i] = 0;
		for (int i=0; i<2; i++) iRec295[i] = 0;
		for (int i=0; i<2; i++) fVec62[i] = 0;
		for (int i=0; i<2; i++) fRec292[i] = 0;
		for (int i=0; i<2; i++) fRec291[i] = 0;
		for (int i=0; i<2; i++) fRec290[i] = 0;
		for (int i=0; i<2; i++) iRec300[i] = 0;
		for (int i=0; i<2; i++) fVec63[i] = 0;
		for (int i=0; i<2; i++) iRec301[i] = 0;
		for (int i=0; i<2; i++) fVec64[i] = 0;
		for (int i=0; i<2; i++) fRec298[i] = 0;
		for (int i=0; i<2; i++) fRec297[i] = 0;
		for (int i=0; i<2; i++) fRec296[i] = 0;
		for (int i=0; i<2; i++) iRec306[i] = 0;
		for (int i=0; i<2; i++) fVec65[i] = 0;
		for (int i=0; i<2; i++) iRec307[i] = 0;
		for (int i=0; i<2; i++) fVec66[i] = 0;
		for (int i=0; i<2; i++) fRec304[i] = 0;
		fConst17 = (1470.5882352941176f / fSamplingFreq);
		for (int i=0; i<2; i++) fRec303[i] = 0;
		for (int i=0; i<2; i++) fRec302[i] = 0;
		for (int i=0; i<2; i++) fRec310[i] = 0;
		for (int i=0; i<2; i++) fRec309[i] = 0;
		for (int i=0; i<2; i++) fRec308[i] = 0;
		for (int i=0; i<2; i++) fRec314[i] = 0;
		for (int i=0; i<2; i++) fRec313[i] = 0;
		for (int i=0; i<2; i++) fRec312[i] = 0;
		for (int i=0; i<2; i++) fRec318[i] = 0;
		for (int i=0; i<2; i++) fRec317[i] = 0;
		for (int i=0; i<2; i++) fRec316[i] = 0;
		for (int i=0; i<2; i++) fRec322[i] = 0;
		fConst18 = (1785.7142857142858f / fSamplingFreq);
		for (int i=0; i<2; i++) fRec321[i] = 0;
		for (int i=0; i<2; i++) fRec320[i] = 0;
		for (int i=0; i<2; i++) fRec326[i] = 0;
		for (int i=0; i<2; i++) fRec325[i] = 0;
		for (int i=0; i<2; i++) fRec324[i] = 0;
		for (int i=0; i<2; i++) fRec330[i] = 0;
		for (int i=0; i<2; i++) fRec329[i] = 0;
		for (int i=0; i<2; i++) fRec328[i] = 0;
		for (int i=0; i<2; i++) fRec334[i] = 0;
		for (int i=0; i<2; i++) fRec333[i] = 0;
		for (int i=0; i<2; i++) fRec332[i] = 0;
		for (int i=0; i<2; i++) fRec338[i] = 0;
		fConst19 = (2127.659574468085f / fSamplingFreq);
		for (int i=0; i<2; i++) fRec337[i] = 0;
		for (int i=0; i<2; i++) fRec336[i] = 0;
		for (int i=0; i<2; i++) fRec342[i] = 0;
		for (int i=0; i<2; i++) fRec341[i] = 0;
		for (int i=0; i<2; i++) fRec340[i] = 0;
		for (int i=0; i<2; i++) fRec346[i] = 0;
		for (int i=0; i<2; i++) fRec345[i] = 0;
		for (int i=0; i<2; i++) fRec344[i] = 0;
		for (int i=0; i<2; i++) fRec350[i] = 0;
		for (int i=0; i<2; i++) fRec349[i] = 0;
		for (int i=0; i<2; i++) fRec348[i] = 0;
		for (int i=0; i<2; i++) fRec354[i] = 0;
		fConst20 = (2564.102564102564f / fSamplingFreq);
		for (int i=0; i<2; i++) fRec353[i] = 0;
		for (int i=0; i<2; i++) fRec352[i] = 0;
		for (int i=0; i<2; i++) fRec358[i] = 0;
		for (int i=0; i<2; i++) fRec357[i] = 0;
		for (int i=0; i<2; i++) fRec356[i] = 0;
		for (int i=0; i<2; i++) fRec362[i] = 0;
		for (int i=0; i<2; i++) fRec361[i] = 0;
		for (int i=0; i<2; i++) fRec360[i] = 0;
		for (int i=0; i<2; i++) fRec366[i] = 0;
		for (int i=0; i<2; i++) fRec365[i] = 0;
		for (int i=0; i<2; i++) fRec364[i] = 0;
		for (int i=0; i<2; i++) fRec370[i] = 0;
		fConst21 = (3703.703703703704f / fSamplingFreq);
		for (int i=0; i<2; i++) fRec369[i] = 0;
		for (int i=0; i<2; i++) fRec368[i] = 0;
		for (int i=0; i<2; i++) fRec374[i] = 0;
		for (int i=0; i<2; i++) fRec373[i] = 0;
		for (int i=0; i<2; i++) fRec372[i] = 0;
		for (int i=0; i<2; i++) fRec378[i] = 0;
		for (int i=0; i<2; i++) fRec377[i] = 0;
		for (int i=0; i<2; i++) fRec376[i] = 0;
		for (int i=0; i<2; i++) fRec382[i] = 0;
		for (int i=0; i<2; i++) fRec381[i] = 0;
		for (int i=0; i<2; i++) fRec380[i] = 0;
		for (int i=0; i<2; i++) iRec388[i] = 0;
		for (int i=0; i<2; i++) fVec67[i] = 0;
		for (int i=0; i<2; i++) fRec386[i] = 0;
		for (int i=0; i<2; i++) fRec385[i] = 0;
		for (int i=0; i<2; i++) fRec384[i] = 0;
		for (int i=0; i<2; i++) iRec393[i] = 0;
		for (int i=0; i<2; i++) fVec68[i] = 0;
		for (int i=0; i<2; i++) fRec391[i] = 0;
		fConst22 = (833.3333333333334f / fSamplingFreq);
		for (int i=0; i<2; i++) fRec390[i] = 0;
		for (int i=0; i<2; i++) fRec389[i] = 0;
		for (int i=0; i<2; i++) iRec398[i] = 0;
		for (int i=0; i<2; i++) fVec69[i] = 0;
		for (int i=0; i<2; i++) fRec396[i] = 0;
		for (int i=0; i<2; i++) fRec395[i] = 0;
		for (int i=0; i<2; i++) fRec394[i] = 0;
		for (int i=0; i<2; i++) iRec403[i] = 0;
		for (int i=0; i<2; i++) fVec70[i] = 0;
		for (int i=0; i<2; i++) fRec401[i] = 0;
		for (int i=0; i<2; i++) fRec400[i] = 0;
		for (int i=0; i<2; i++) fRec399[i] = 0;
		for (int i=0; i<2; i++) iRec408[i] = 0;
		for (int i=0; i<2; i++) fVec71[i] = 0;
		for (int i=0; i<2; i++) fRec406[i] = 0;
		for (int i=0; i<2; i++) fRec405[i] = 0;
		for (int i=0; i<2; i++) fRec404[i] = 0;
		for (int i=0; i<2; i++) iRec413[i] = 0;
		for (int i=0; i<2; i++) fVec72[i] = 0;
		for (int i=0; i<2; i++) fRec411[i] = 0;
		for (int i=0; i<2; i++) fRec410[i] = 0;
		fConst23 = (0.0016849851632047478f / (fConst2 + 0.0016849851632047478f));
		for (int i=0; i<2; i++) fRec409[i] = 0;
		for (int i=0; i<2; i++) iRec418[i] = 0;
		for (int i=0; i<2; i++) fVec73[i] = 0;
		for (int i=0; i<2; i++) fRec416[i] = 0;
		for (int i=0; i<2; i++) fRec415[i] = 0;
		for (int i=0; i<2; i++) fRec414[i] = 0;
		for (int i=0; i<2; i++) iRec423[i] = 0;
		for (int i=0; i<2; i++) fVec74[i] = 0;
		for (int i=0; i<2; i++) fRec421[i] = 0;
		for (int i=0; i<2; i++) fRec420[i] = 0;
		for (int i=0; i<2; i++) fRec419[i] = 0;
		for (int i=0; i<2; i++) iRec428[i] = 0;
		for (int i=0; i<2; i++) fVec75[i] = 0;
		for (int i=0; i<2; i++) fRec426[i] = 0;
		for (int i=0; i<2; i++) fRec425[i] = 0;
		for (int i=0; i<2; i++) fRec424[i] = 0;
		for (int i=0; i<2; i++) iRec433[i] = 0;
		for (int i=0; i<2; i++) fVec76[i] = 0;
		for (int i=0; i<2; i++) fRec431[i] = 0;
		fConst24 = (666.6666666666666f / fSamplingFreq);
		for (int i=0; i<2; i++) fRec430[i] = 0;
		for (int i=0; i<2; i++) fRec429[i] = 0;
		for (int i=0; i<2; i++) iRec438[i] = 0;
		for (int i=0; i<2; i++) fVec77[i] = 0;
		for (int i=0; i<2; i++) fRec436[i] = 0;
		for (int i=0; i<2; i++) fRec435[i] = 0;
		for (int i=0; i<2; i++) fRec434[i] = 0;
		for (int i=0; i<2; i++) iRec443[i] = 0;
		for (int i=0; i<2; i++) fVec78[i] = 0;
		for (int i=0; i<2; i++) fRec441[i] = 0;
		for (int i=0; i<2; i++) fRec440[i] = 0;
		for (int i=0; i<2; i++) fRec439[i] = 0;
		for (int i=0; i<2; i++) iRec448[i] = 0;
		for (int i=0; i<2; i++) fVec79[i] = 0;
		for (int i=0; i<2; i++) fRec446[i] = 0;
		for (int i=0; i<2; i++) fRec445[i] = 0;
		for (int i=0; i<2; i++) fRec444[i] = 0;
		for (int i=0; i<2; i++) iRec453[i] = 0;
		for (int i=0; i<2; i++) fVec80[i] = 0;
		for (int i=0; i<2; i++) fRec451[i] = 0;
		for (int i=0; i<2; i++) fRec450[i] = 0;
		for (int i=0; i<2; i++) fRec449[i] = 0;
		for (int i=0; i<2; i++) iRec458[i] = 0;
		for (int i=0; i<2; i++) fVec81[i] = 0;
		for (int i=0; i<2; i++) fRec456[i] = 0;
		for (int i=0; i<2; i++) fRec455[i] = 0;
		for (int i=0; i<2; i++) fRec454[i] = 0;
		for (int i=0; i<2; i++) iRec463[i] = 0;
		for (int i=0; i<2; i++) fVec82[i] = 0;
		for (int i=0; i<2; i++) fRec461[i] = 0;
		for (int i=0; i<2; i++) fRec460[i] = 0;
		for (int i=0; i<2; i++) fRec459[i] = 0;
		for (int i=0; i<2; i++) iRec468[i] = 0;
		for (int i=0; i<2; i++) fVec83[i] = 0;
		for (int i=0; i<2; i++) fRec466[i] = 0;
		for (int i=0; i<2; i++) fRec465[i] = 0;
		for (int i=0; i<2; i++) fRec464[i] = 0;
		fConst25 = (36.243757712787264f / fConst0);
		fConst26 = (1 - fConst25);
		iConst27 = int((0.02f * max(22050, min(192000, fSamplingFreq))));
		iConst28 = (iConst27 - 1);
		fConst29 = (1.0f / iConst27);
		for (int i=0; i<2; i++) fRec470[i] = 0;
		for (int i=0; i<2; i++) fVec84[i] = 0;
		for (int i=0; i<2; i++) fRec469[i] = 0;
		fConst30 = (0.027590958087858178f * fConst0);
		for (int i=0; i<5; i++) fVec85[i] = 0;
		fslider4 = 1.0f;
		fslider5 = 1.0f;
		for (int i=0; i<2; i++) fRec471[i] = 0;
		fslider6 = 1.0f;
		fslider7 = 1.0f;
		fConst31 = (3968.253968253968f / fSamplingFreq);
		for (int i=0; i<2; i++) fRec472[i] = 0;
		fslider8 = 1.0f;
		for (int i=0; i<2; i++) fVec86[i] = 0;
		fConst32 = (0.000858f / (fConst2 + 0.000858f));
		for (int i=0; i<2; i++) fRec474[i] = 0;
		for (int i=0; i<2; i++) fVec87[i] = 0;
		fConst33 = (0.000429f / (fConst2 + 0.000429f));
		for (int i=0; i<2; i++) fRec473[i] = 0;
		fslider9 = 1.0f;
		for (int i=0; i<2; i++) fVec88[i] = 0;
		fConst34 = (0.00039f / (fConst2 + 0.00039f));
		for (int i=0; i<2; i++) fRec476[i] = 0;
		for (int i=0; i<2; i++) fVec89[i] = 0;
		fConst35 = (0.000195f / (fConst2 + 0.000195f));
		for (int i=0; i<2; i++) fRec475[i] = 0;
		fslider10 = 1.0f;
		for (int i=0; i<2; i++) fVec90[i] = 0;
		fConst36 = (0.0001833f / (fConst2 + 0.0001833f));
		for (int i=0; i<2; i++) fRec478[i] = 0;
		for (int i=0; i<2; i++) fVec91[i] = 0;
		fConst37 = (9.165e-05f / (fConst2 + 9.165e-05f));
		for (int i=0; i<2; i++) fRec477[i] = 0;
		fslider11 = 1.0f;
		for (int i=0; i<2; i++) fVec92[i] = 0;
		fConst38 = (0.00010530000000000001f / (fConst2 + 0.00010530000000000001f));
		for (int i=0; i<2; i++) fRec480[i] = 0;
		for (int i=0; i<2; i++) fVec93[i] = 0;
		fConst39 = (5.2650000000000006e-05f / (fConst2 + 5.2650000000000006e-05f));
		for (int i=0; i<2; i++) fRec479[i] = 0;
		fslider12 = 0.0f;
		for (int i=0; i<2; i++) fRec482[i] = 0;
		for (int i=0; i<2; i++) fRec481[i] = 0;
		for (int i=0; i<2; i++) fRec484[i] = 0;
		for (int i=0; i<2; i++) fRec483[i] = 0;
		for (int i=0; i<2; i++) fRec486[i] = 0;
		for (int i=0; i<2; i++) fRec485[i] = 0;
		for (int i=0; i<2; i++) fRec488[i] = 0;
		for (int i=0; i<2; i++) fRec487[i] = 0;
		fslider13 = 1.0f;
		fslider14 = 1.0f;
		fslider15 = 0.5f;
		fslider16 = 1.0f;
		fslider17 = 0.5f;
		fslider18 = 1.0f;
		fslider19 = 0.0f;
		fslider20 = 0.5f;
		fslider21 = 0.1f;
		for (int i=0; i<2; i++) fRec489[i] = 0;
	}
	virtual void init(int samplingFreq) {
		classInit(samplingFreq);
		instanceInit(samplingFreq);
	}
	virtual void buildUserInterface(UI* interface) {
		interface->openVerticalBox("yc20");
		interface->addButton("A0", &fbutton27);
		interface->addButton("A1", &fbutton7);
		interface->addButton("A2", &fbutton19);
		interface->addButton("A3", &fbutton54);
		interface->addButton("A4", &fbutton55);
		interface->addButton("C0", &fbutton36);
		interface->addButton("C1", &fbutton24);
		interface->addButton("C2", &fbutton10);
		interface->addButton("C3", &fbutton0);
		interface->addButton("C4", &fbutton1);
		interface->addButton("D0", &fbutton34);
		interface->addButton("D1", &fbutton22);
		interface->addButton("D2", &fbutton12);
		interface->addButton("D3", &fbutton40);
		interface->addButton("D4", &fbutton41);
		interface->addButton("F0", &fbutton31);
		interface->addButton("F1", &fbutton2);
		interface->addButton("F2", &fbutton15);
		interface->addButton("F3", &fbutton46);
		interface->addButton("F4", &fbutton47);
		interface->addButton("G0", &fbutton29);
		interface->addButton("G1", &fbutton5);
		interface->addButton("G2", &fbutton17);
		interface->addButton("G3", &fbutton50);
		interface->addButton("G4", &fbutton51);
		interface->openVerticalBox("[2]vibrato");
		interface->declare(&fslider2, "1", "");
		interface->addHorizontalSlider("depth", &fslider2, 0.0f, 0.0f, 1.0f, 0.2f);
		interface->declare(&fslider1, "2", "");
		interface->addHorizontalSlider("speed", &fslider1, 0.0f, 0.0f, 1.0f, 0.2f);
		interface->closeBox();
		interface->addButton("a0", &fbutton28);
		interface->addButton("a1", &fbutton6);
		interface->addButton("a2", &fbutton18);
		interface->addButton("a3", &fbutton52);
		interface->addButton("a4", &fbutton53);
		interface->addButton("b0", &fbutton26);
		interface->addButton("b1", &fbutton8);
		interface->addButton("b2", &fbutton20);
		interface->addButton("b3", &fbutton56);
		interface->addButton("b4", &fbutton57);
		interface->addHorizontalSlider("balance", &fslider13, 1.0f, 0.0f, 1.0f, 0.25f);
		interface->openHorizontalBox("bass");
		interface->declare(&fslider7, "1", "");
		interface->addVerticalSlider("16' b", &fslider7, 1.0f, 0.0f, 1.0f, 0.25f);
		interface->declare(&fslider6, "2", "");
		interface->addVerticalSlider("8' b", &fslider6, 1.0f, 0.0f, 1.0f, 0.25f);
		interface->declare(&fslider3, "3", "");
		interface->addHorizontalSlider("bass manual", &fslider3, 0.0f, 0.0f, 1.0f, 1.0f);
		interface->declare(&fslider5, "3", "");
		interface->addVerticalSlider("bass volume", &fslider5, 1.0f, 0.0f, 1.0f, 0.25f);
		interface->closeBox();
		interface->addButton("c0", &fbutton37);
		interface->addButton("c1", &fbutton25);
		interface->addButton("c2", &fbutton9);
		interface->addButton("c3", &fbutton58);
		interface->addButton("c4", &fbutton59);
		interface->addButton("c5", &fbutton60);
		interface->addButton("d0", &fbutton35);
		interface->addButton("d1", &fbutton23);
		interface->addButton("d2", &fbutton11);
		interface->addButton("d3", &fbutton38);
		interface->addButton("d4", &fbutton39);
		interface->addButton("e0", &fbutton33);
		interface->addButton("e1", &fbutton21);
		interface->addButton("e2", &fbutton13);
		interface->addButton("e3", &fbutton42);
		interface->addButton("e4", &fbutton43);
		interface->addButton("f0", &fbutton32);
		interface->addButton("f1", &fbutton3);
		interface->addButton("f2", &fbutton14);
		interface->addButton("f3", &fbutton44);
		interface->addButton("f4", &fbutton45);
		interface->addButton("g0", &fbutton30);
		interface->addButton("g1", &fbutton4);
		interface->addButton("g2", &fbutton16);
		interface->addButton("g3", &fbutton48);
		interface->addButton("g4", &fbutton49);
		interface->openHorizontalBox("i");
		interface->declare(&fslider15, "1", "");
		interface->addVerticalSlider("16' i", &fslider15, 0.5f, 0.0f, 1.0f, 0.25f);
		interface->declare(&fslider14, "2", "");
		interface->addVerticalSlider("8' i", &fslider14, 1.0f, 0.0f, 1.0f, 0.25f);
		interface->declare(&fslider16, "3", "");
		interface->addVerticalSlider("4' i", &fslider16, 1.0f, 0.0f, 1.0f, 0.25f);
		interface->declare(&fslider17, "4", "");
		interface->addVerticalSlider("2 2/3' i", &fslider17, 0.5f, 0.0f, 1.0f, 0.25f);
		interface->declare(&fslider18, "5", "");
		interface->addVerticalSlider("2' i", &fslider18, 1.0f, 0.0f, 1.0f, 0.25f);
		interface->declare(&fslider19, "6", "");
		interface->addVerticalSlider("1 3/5' i", &fslider19, 0.0f, 0.0f, 1.0f, 0.25f);
		interface->declare(&fslider20, "7", "");
		interface->addVerticalSlider("1' i", &fslider20, 0.5f, 0.0f, 1.0f, 0.25f);
		interface->closeBox();
		interface->openHorizontalBox("ii");
		interface->declare(&fslider12, "1", "");
		interface->addVerticalSlider("bright", &fslider12, 0.0f, 0.0f, 1.0f, 0.25f);
		interface->declare(&fslider8, "2", "");
		interface->addVerticalSlider("16' ii", &fslider8, 1.0f, 0.0f, 1.0f, 0.25f);
		interface->declare(&fslider9, "3", "");
		interface->addVerticalSlider("8' ii", &fslider9, 1.0f, 0.0f, 1.0f, 0.25f);
		interface->declare(&fslider10, "4", "");
		interface->addVerticalSlider("4' ii", &fslider10, 1.0f, 0.0f, 1.0f, 0.25f);
		interface->declare(&fslider11, "5", "");
		interface->addVerticalSlider("2' ii", &fslider11, 1.0f, 0.0f, 1.0f, 0.25f);
		interface->closeBox();
		interface->addHorizontalSlider("percussion", &fslider4, 1.0f, 0.0f, 1.0f, 0.25f);
		interface->addHorizontalSlider("pitch", &fslider0, 0.0f, -1.0f, 1.0f, 0.05f);
		interface->addHorizontalSlider("volume", &fslider21, 0.1f, 0.0f, 1.0f, 0.01f);
		interface->closeBox();
	}
	virtual void compute (int count, FAUSTFLOAT** input, FAUSTFLOAT** output) {
		float 	fSlow0 = (1 + (0.03f * fslider0));
		float 	fSlow1 = (fConst1 * float((5.0f + (3 * fslider1))));
		float 	fSlow2 = (0.0001f + (0.0149f * fslider2));
		float 	fSlow3 = fbutton0;
		float 	fSlow4 = fbutton1;
		float 	fSlow5 = (fSlow4 + fSlow3);
		float 	fSlow6 = fbutton2;
		float 	fSlow7 = fbutton3;
		float 	fSlow8 = fbutton4;
		float 	fSlow9 = fbutton5;
		float 	fSlow10 = fbutton6;
		float 	fSlow11 = fbutton7;
		float 	fSlow12 = fbutton8;
		float 	fSlow13 = fbutton9;
		float 	fSlow14 = fbutton10;
		float 	fSlow15 = fbutton11;
		float 	fSlow16 = fbutton12;
		float 	fSlow17 = fbutton13;
		float 	fSlow18 = fbutton14;
		float 	fSlow19 = fbutton15;
		float 	fSlow20 = fbutton16;
		float 	fSlow21 = fbutton17;
		float 	fSlow22 = fbutton18;
		float 	fSlow23 = fbutton19;
		float 	fSlow24 = fbutton20;
		float 	fSlow25 = fbutton21;
		float 	fSlow26 = fbutton22;
		float 	fSlow27 = fbutton23;
		float 	fSlow28 = fbutton24;
		float 	fSlow29 = fbutton25;
		float 	fSlow30 = fbutton26;
		float 	fSlow31 = fbutton27;
		float 	fSlow32 = fbutton28;
		float 	fSlow33 = fbutton29;
		float 	fSlow34 = fbutton30;
		float 	fSlow35 = fbutton31;
		float 	fSlow36 = fbutton32;
		float 	fSlow37 = fbutton33;
		float 	fSlow38 = fbutton34;
		float 	fSlow39 = fbutton35;
		float 	fSlow40 = fbutton36;
		float 	fSlow41 = fbutton37;
		float 	fSlow42 = fslider3;
		float 	fSlow43 = (1.0f - fSlow42);
		float 	fSlow44 = fbutton38;
		float 	fSlow45 = fbutton39;
		float 	fSlow46 = (fSlow45 + fSlow44);
		float 	fSlow47 = fbutton40;
		float 	fSlow48 = fbutton41;
		float 	fSlow49 = (fSlow48 + fSlow47);
		float 	fSlow50 = fbutton42;
		float 	fSlow51 = fbutton43;
		float 	fSlow52 = (fSlow51 + fSlow50);
		float 	fSlow53 = fbutton44;
		float 	fSlow54 = fbutton45;
		float 	fSlow55 = (fSlow54 + fSlow53);
		float 	fSlow56 = fbutton46;
		float 	fSlow57 = fbutton47;
		float 	fSlow58 = (fSlow57 + fSlow56);
		float 	fSlow59 = fbutton48;
		float 	fSlow60 = fbutton49;
		float 	fSlow61 = (fSlow60 + fSlow59);
		float 	fSlow62 = fbutton50;
		float 	fSlow63 = fbutton51;
		float 	fSlow64 = (fSlow63 + fSlow62);
		float 	fSlow65 = fbutton52;
		float 	fSlow66 = fbutton53;
		float 	fSlow67 = (fSlow66 + fSlow65);
		float 	fSlow68 = fbutton54;
		float 	fSlow69 = fbutton55;
		float 	fSlow70 = (fSlow69 + fSlow68);
		float 	fSlow71 = fbutton56;
		float 	fSlow72 = fbutton57;
		float 	fSlow73 = (fSlow72 + fSlow71);
		float 	fSlow74 = fbutton58;
		float 	fSlow75 = fbutton59;
		float 	fSlow76 = fbutton60;
		float 	fSlow77 = (fSlow76 + (fSlow75 + fSlow74));
		float 	fSlow78 = (4.5f * fslider4);
		float 	fSlow79 = (0.02f * fslider5);
		float 	fSlow80 = fslider6;
		float 	fSlow81 = (fSlow80 * (1 + (fSlow80 * ((2.81f * fSlow80) - 2.81f))));
		float 	fSlow82 = fslider7;
		float 	fSlow83 = (fSlow82 * (1 + (fSlow82 * ((2.81f * fSlow82) - 2.81f))));
		float 	fSlow84 = fslider8;
		float 	fSlow85 = (fSlow84 * (1 + (fSlow84 * ((2.81f * fSlow84) - 2.81f))));
		float 	fSlow86 = (1.679f * fSlow85);
		float 	fSlow87 = (0.7695416666666667f * fSlow85);
		float 	fSlow88 = fslider9;
		float 	fSlow89 = (fSlow88 * (1 + (fSlow88 * ((2.81f * fSlow88) - 2.81f))));
		float 	fSlow90 = (0.4583333333333333f * fSlow89);
		float 	fSlow91 = fslider10;
		float 	fSlow92 = (fSlow91 * (1 + (fSlow91 * ((2.81f * fSlow91) - 2.81f))));
		float 	fSlow93 = (0.4583333333333333f * fSlow92);
		float 	fSlow94 = (fSlow76 + fSlow75);
		float 	fSlow95 = fslider11;
		float 	fSlow96 = (fSlow95 * (1 + (fSlow95 * ((2.81f * fSlow95) - 2.81f))));
		float 	fSlow97 = (0.4583333333333333f * fSlow96);
		float 	fSlow98 = (0.9615384615384616f * fslider12);
		float 	fSlow99 = (0.019230769230769232f + fSlow98);
		float 	fSlow100 = (0.6f * (0.9807692307692307f - fSlow98));
		float 	fSlow101 = fslider13;
		float 	fSlow102 = (2.5f * fSlow101);
		float 	fSlow103 = fslider14;
		float 	fSlow104 = (fSlow103 * (1 + (fSlow103 * ((2.81f * fSlow103) - 2.81f))));
		float 	fSlow105 = fslider15;
		float 	fSlow106 = (1.679f * (fSlow105 * (1 + (fSlow105 * ((2.81f * fSlow105) - 2.81f)))));
		float 	fSlow107 = fslider16;
		float 	fSlow108 = (fSlow107 * (1 + (fSlow107 * ((2.81f * fSlow107) - 2.81f))));
		float 	fSlow109 = fslider17;
		float 	fSlow110 = (fSlow109 * (1 + (fSlow109 * ((2.81f * fSlow109) - 2.81f))));
		float 	fSlow111 = fslider18;
		float 	fSlow112 = (fSlow111 * (1 + (fSlow111 * ((2.81f * fSlow111) - 2.81f))));
		float 	fSlow113 = fslider19;
		float 	fSlow114 = (fSlow113 * (1 + (fSlow113 * ((2.81f * fSlow113) - 2.81f))));
		float 	fSlow115 = fslider20;
		float 	fSlow116 = (fSlow115 * (1 + (fSlow115 * ((2.81f * fSlow115) - 2.81f))));
		float 	fSlow117 = (1 - fSlow101);
		float 	fSlow118 = (0.02f * fslider21);
		FAUSTFLOAT* output0 = output[0];
		for (int i=0; i<count; i++) {
			fRec4[0] = ((fRec4[1] + fSlow1) - floorf(fRec4[1]));
			float fTemp0 = ((fSlow2 * sinf((6.283185307179586f * fRec4[0]))) + fSlow0);
			float fTemp1 = ((fConst1 * float((4434.922095629953f * fTemp0))) + fRec3[1]);
			fRec3[0] = (fTemp1 - floorf(fTemp1));
			int iTemp2 = ((int((fRec3[1] > fRec3[0])))?1:0);
			float fTemp3 = (1 + fRec3[0]);
			float fTemp4 = (0 - ((fRec3[1] + floorf((fTemp3 - fRec3[1]))) - fTemp3));
			fRec1[0] = saw_blep_x(iTemp2, (0 - (2 * (fRec3[0] - 0.5f))), fRec3[0], fTemp4);
			fRec2[0] = saw_blep_prev(iTemp2, fRec1[1], fRec3[1], fTemp4);
			fRec0[0] = (fConst3 * (((1.95f * fRec2[0]) - (1.95f * fRec2[1])) + fRec0[1]));
			float fTemp5 = ((fConst1 * float((5919.91076338615f * fTemp0))) + fRec10[1]);
			fRec10[0] = (fTemp5 - floorf(fTemp5));
			iRec9[0] = ((int(((fRec10[0] - fRec10[1]) < 0)))?(1 - iRec9[1]):iRec9[1]);
			float fTemp6 = (fRec10[0] + iRec9[0]);
			fVec0[0] = fTemp6;
			float fTemp7 = (0.5f * fVec0[0]);
			float fTemp8 = (0.5f * fVec0[1]);
			iRec11[0] = ((int(((fTemp7 - fTemp8) < 0)))?(1 - iRec11[1]):iRec11[1]);
			float fTemp9 = (iRec11[0] + fTemp7);
			fVec1[0] = fTemp9;
			float fTemp10 = (0.5f * fVec1[1]);
			float fTemp11 = (0.5f * fVec1[0]);
			float fTemp12 = (1 + fTemp11);
			float fTemp13 = (fTemp12 - (fTemp10 + floorf((fTemp12 - fTemp10))));
			float fTemp14 = (0.5f * (1.0f + fVec1[0]));
			int iTemp15 = ((int((fTemp10 > fTemp11)))?1:((int(((fTemp14 - floorf(fTemp14)) < fTemp13)))?2:0));
			fRec7[0] = square_blep_x(iTemp15, ((int((fTemp11 < 0.5f)))?1.0f:-1.0f), fTemp11, fTemp13);
			float 	fRec8 = square_blep_prev(iTemp15, fRec7[1], fTemp10, fTemp13);
			fRec6[0] = (fRec6[1] + (fConst4 * (fRec8 - fRec6[1])));
			fRec5[0] = (fConst3 * ((fRec6[0] - fRec6[1]) + fRec5[1]));
			float fTemp16 = ((fConst1 * float((5587.651702928062f * fTemp0))) + fRec17[1]);
			fRec17[0] = (fTemp16 - floorf(fTemp16));
			iRec16[0] = ((int(((fRec17[0] - fRec17[1]) < 0)))?(1 - iRec16[1]):iRec16[1]);
			float fTemp17 = (fRec17[0] + iRec16[0]);
			fVec2[0] = fTemp17;
			float fTemp18 = (0.5f * fVec2[0]);
			float fTemp19 = (0.5f * fVec2[1]);
			iRec18[0] = ((int(((fTemp18 - fTemp19) < 0)))?(1 - iRec18[1]):iRec18[1]);
			float fTemp20 = (iRec18[0] + fTemp18);
			fVec3[0] = fTemp20;
			float fTemp21 = (0.5f * fVec3[1]);
			float fTemp22 = (0.5f * fVec3[0]);
			float fTemp23 = (1 + fTemp22);
			float fTemp24 = (fTemp23 - (fTemp21 + floorf((fTemp23 - fTemp21))));
			float fTemp25 = (0.5f * (1.0f + fVec3[0]));
			int iTemp26 = ((int((fTemp21 > fTemp22)))?1:((int(((fTemp25 - floorf(fTemp25)) < fTemp24)))?2:0));
			fRec14[0] = square_blep_x(iTemp26, ((int((fTemp22 < 0.5f)))?1.0f:-1.0f), fTemp22, fTemp24);
			float 	fRec15 = square_blep_prev(iTemp26, fRec14[1], fTemp21, fTemp24);
			fRec13[0] = (fRec13[1] + (fConst4 * (fRec15 - fRec13[1])));
			fRec12[0] = (fConst3 * ((fRec13[0] - fRec13[1]) + fRec12[1]));
			float fTemp27 = ((fConst1 * float((6271.926975707989f * fTemp0))) + fRec24[1]);
			fRec24[0] = (fTemp27 - floorf(fTemp27));
			iRec23[0] = ((int(((fRec24[0] - fRec24[1]) < 0)))?(1 - iRec23[1]):iRec23[1]);
			float fTemp28 = (fRec24[0] + iRec23[0]);
			fVec4[0] = fTemp28;
			float fTemp29 = (0.5f * fVec4[0]);
			float fTemp30 = (0.5f * fVec4[1]);
			iRec25[0] = ((int(((fTemp29 - fTemp30) < 0)))?(1 - iRec25[1]):iRec25[1]);
			float fTemp31 = (iRec25[0] + fTemp29);
			fVec5[0] = fTemp31;
			float fTemp32 = (0.5f * fVec5[1]);
			float fTemp33 = (0.5f * fVec5[0]);
			float fTemp34 = (1 + fTemp33);
			float fTemp35 = (fTemp34 - (fTemp32 + floorf((fTemp34 - fTemp32))));
			float fTemp36 = (0.5f * (1.0f + fVec5[0]));
			int iTemp37 = ((int((fTemp32 > fTemp33)))?1:((int(((fTemp36 - floorf(fTemp36)) < fTemp35)))?2:0));
			fRec21[0] = square_blep_x(iTemp37, ((int((fTemp33 < 0.5f)))?1.0f:-1.0f), fTemp33, fTemp35);
			float 	fRec22 = square_blep_prev(iTemp37, fRec21[1], fTemp32, fTemp35);
			fRec20[0] = (fRec20[1] + (fConst4 * (fRec22 - fRec20[1])));
			fRec19[0] = (fConst3 * ((fRec20[0] - fRec20[1]) + fRec19[1]));
			float fTemp38 = ((fConst1 * float((6644.875161279122f * fTemp0))) + fRec31[1]);
			fRec31[0] = (fTemp38 - floorf(fTemp38));
			iRec30[0] = ((int(((fRec31[0] - fRec31[1]) < 0)))?(1 - iRec30[1]):iRec30[1]);
			float fTemp39 = (fRec31[0] + iRec30[0]);
			fVec6[0] = fTemp39;
			float fTemp40 = (0.5f * fVec6[0]);
			float fTemp41 = (0.5f * fVec6[1]);
			iRec32[0] = ((int(((fTemp40 - fTemp41) < 0)))?(1 - iRec32[1]):iRec32[1]);
			float fTemp42 = (iRec32[0] + fTemp40);
			fVec7[0] = fTemp42;
			float fTemp43 = (0.5f * fVec7[1]);
			float fTemp44 = (0.5f * fVec7[0]);
			float fTemp45 = (1 + fTemp44);
			float fTemp46 = (fTemp45 - (fTemp43 + floorf((fTemp45 - fTemp43))));
			float fTemp47 = (0.5f * (1.0f + fVec7[0]));
			int iTemp48 = ((int((fTemp43 > fTemp44)))?1:((int(((fTemp47 - floorf(fTemp47)) < fTemp46)))?2:0));
			fRec28[0] = square_blep_x(iTemp48, ((int((fTemp44 < 0.5f)))?1.0f:-1.0f), fTemp44, fTemp46);
			float 	fRec29 = square_blep_prev(iTemp48, fRec28[1], fTemp43, fTemp46);
			fRec27[0] = (fRec27[1] + (fConst5 * (fRec29 - fRec27[1])));
			fRec26[0] = (fConst3 * ((fRec27[0] - fRec27[1]) + fRec26[1]));
			float fTemp49 = ((fConst1 * float((7.04e+03f * fTemp0))) + fRec38[1]);
			fRec38[0] = (fTemp49 - floorf(fTemp49));
			iRec37[0] = ((int(((fRec38[0] - fRec38[1]) < 0)))?(1 - iRec37[1]):iRec37[1]);
			float fTemp50 = (fRec38[0] + iRec37[0]);
			fVec8[0] = fTemp50;
			float fTemp51 = (0.5f * fVec8[0]);
			float fTemp52 = (0.5f * fVec8[1]);
			iRec39[0] = ((int(((fTemp51 - fTemp52) < 0)))?(1 - iRec39[1]):iRec39[1]);
			float fTemp53 = (iRec39[0] + fTemp51);
			fVec9[0] = fTemp53;
			float fTemp54 = (0.5f * fVec9[1]);
			float fTemp55 = (0.5f * fVec9[0]);
			float fTemp56 = (1 + fTemp55);
			float fTemp57 = (fTemp56 - (fTemp54 + floorf((fTemp56 - fTemp54))));
			float fTemp58 = (0.5f * (1.0f + fVec9[0]));
			int iTemp59 = ((int((fTemp54 > fTemp55)))?1:((int(((fTemp58 - floorf(fTemp58)) < fTemp57)))?2:0));
			fRec35[0] = square_blep_x(iTemp59, ((int((fTemp55 < 0.5f)))?1.0f:-1.0f), fTemp55, fTemp57);
			float 	fRec36 = square_blep_prev(iTemp59, fRec35[1], fTemp54, fTemp57);
			fRec34[0] = (fRec34[1] + (fConst5 * (fRec36 - fRec34[1])));
			fRec33[0] = (fConst3 * ((fRec34[0] - fRec34[1]) + fRec33[1]));
			float fTemp60 = ((fConst1 * float((7458.620184289437f * fTemp0))) + fRec45[1]);
			fRec45[0] = (fTemp60 - floorf(fTemp60));
			iRec44[0] = ((int(((fRec45[0] - fRec45[1]) < 0)))?(1 - iRec44[1]):iRec44[1]);
			float fTemp61 = (fRec45[0] + iRec44[0]);
			fVec10[0] = fTemp61;
			float fTemp62 = (0.5f * fVec10[0]);
			float fTemp63 = (0.5f * fVec10[1]);
			iRec46[0] = ((int(((fTemp62 - fTemp63) < 0)))?(1 - iRec46[1]):iRec46[1]);
			float fTemp64 = (iRec46[0] + fTemp62);
			fVec11[0] = fTemp64;
			float fTemp65 = (0.5f * fVec11[1]);
			float fTemp66 = (0.5f * fVec11[0]);
			float fTemp67 = (1 + fTemp66);
			float fTemp68 = (fTemp67 - (fTemp65 + floorf((fTemp67 - fTemp65))));
			float fTemp69 = (0.5f * (1.0f + fVec11[0]));
			int iTemp70 = ((int((fTemp65 > fTemp66)))?1:((int(((fTemp69 - floorf(fTemp69)) < fTemp68)))?2:0));
			fRec42[0] = square_blep_x(iTemp70, ((int((fTemp66 < 0.5f)))?1.0f:-1.0f), fTemp66, fTemp68);
			float 	fRec43 = square_blep_prev(iTemp70, fRec42[1], fTemp65, fTemp68);
			fRec41[0] = (fRec41[1] + (fConst5 * (fRec43 - fRec41[1])));
			fRec40[0] = (fConst3 * ((fRec41[0] - fRec41[1]) + fRec40[1]));
			float fTemp71 = ((fConst1 * float((7902.132820097988f * fTemp0))) + fRec52[1]);
			fRec52[0] = (fTemp71 - floorf(fTemp71));
			iRec51[0] = ((int(((fRec52[0] - fRec52[1]) < 0)))?(1 - iRec51[1]):iRec51[1]);
			float fTemp72 = (fRec52[0] + iRec51[0]);
			fVec12[0] = fTemp72;
			float fTemp73 = (0.5f * fVec12[0]);
			float fTemp74 = (0.5f * fVec12[1]);
			iRec53[0] = ((int(((fTemp73 - fTemp74) < 0)))?(1 - iRec53[1]):iRec53[1]);
			float fTemp75 = (iRec53[0] + fTemp73);
			fVec13[0] = fTemp75;
			float fTemp76 = (0.5f * fVec13[1]);
			float fTemp77 = (0.5f * fVec13[0]);
			float fTemp78 = (1 + fTemp77);
			float fTemp79 = (fTemp78 - (fTemp76 + floorf((fTemp78 - fTemp76))));
			float fTemp80 = (0.5f * (1.0f + fVec13[0]));
			int iTemp81 = ((int((fTemp76 > fTemp77)))?1:((int(((fTemp80 - floorf(fTemp80)) < fTemp79)))?2:0));
			fRec49[0] = square_blep_x(iTemp81, ((int((fTemp77 < 0.5f)))?1.0f:-1.0f), fTemp77, fTemp79);
			float 	fRec50 = square_blep_prev(iTemp81, fRec49[1], fTemp76, fTemp79);
			fRec48[0] = (fRec48[1] + (fConst5 * (fRec50 - fRec48[1])));
			fRec47[0] = (fConst3 * ((fRec48[0] - fRec48[1]) + fRec47[1]));
			float fTemp82 = ((fConst1 * float((4186.009044809578f * fTemp0))) + fRec59[1]);
			fRec59[0] = (fTemp82 - floorf(fTemp82));
			iRec58[0] = ((int(((fRec59[0] - fRec59[1]) < 0)))?(1 - iRec58[1]):iRec58[1]);
			float fTemp83 = (fRec59[0] + iRec58[0]);
			fVec14[0] = fTemp83;
			float fTemp84 = (0.5f * fVec14[1]);
			float fTemp85 = (0.5f * fVec14[0]);
			float fTemp86 = (1 + fTemp85);
			float fTemp87 = (fTemp86 - (fTemp84 + floorf((fTemp86 - fTemp84))));
			float fTemp88 = (0.5f * (1.0f + fVec14[0]));
			int iTemp89 = ((int((fTemp84 > fTemp85)))?1:((int(((fTemp88 - floorf(fTemp88)) < fTemp87)))?2:0));
			fRec56[0] = square_blep_x(iTemp89, ((int((fTemp85 < 0.5f)))?1.0f:-1.0f), fTemp85, fTemp87);
			float 	fRec57 = square_blep_prev(iTemp89, fRec56[1], fTemp84, fTemp87);
			fRec55[0] = (fRec55[1] + (fConst6 * (fRec57 - fRec55[1])));
			fRec54[0] = (fConst3 * ((fRec55[0] - fRec55[1]) + fRec54[1]));
			iRec64[0] = ((int(((fRec3[0] - fRec3[1]) < 0)))?(1 - iRec64[1]):iRec64[1]);
			float fTemp90 = (fRec3[0] + iRec64[0]);
			fVec15[0] = fTemp90;
			float fTemp91 = (0.5f * fVec15[1]);
			float fTemp92 = (0.5f * fVec15[0]);
			float fTemp93 = (1 + fTemp92);
			float fTemp94 = (fTemp93 - (fTemp91 + floorf((fTemp93 - fTemp91))));
			float fTemp95 = (0.5f * (1.0f + fVec15[0]));
			int iTemp96 = ((int((fTemp91 > fTemp92)))?1:((int(((fTemp95 - floorf(fTemp95)) < fTemp94)))?2:0));
			fRec62[0] = square_blep_x(iTemp96, ((int((fTemp92 < 0.5f)))?1.0f:-1.0f), fTemp92, fTemp94);
			float 	fRec63 = square_blep_prev(iTemp96, fRec62[1], fTemp91, fTemp94);
			fRec61[0] = (fRec61[1] + (fConst6 * (fRec63 - fRec61[1])));
			fRec60[0] = (fConst3 * ((fRec61[0] - fRec61[1]) + fRec60[1]));
			float fTemp97 = ((fConst1 * float((4698.63628667852f * fTemp0))) + fRec70[1]);
			fRec70[0] = (fTemp97 - floorf(fTemp97));
			iRec69[0] = ((int(((fRec70[0] - fRec70[1]) < 0)))?(1 - iRec69[1]):iRec69[1]);
			float fTemp98 = (fRec70[0] + iRec69[0]);
			fVec16[0] = fTemp98;
			float fTemp99 = (0.5f * fVec16[1]);
			float fTemp100 = (0.5f * fVec16[0]);
			float fTemp101 = (1 + fTemp100);
			float fTemp102 = (fTemp101 - (fTemp99 + floorf((fTemp101 - fTemp99))));
			float fTemp103 = (0.5f * (1.0f + fVec16[0]));
			int iTemp104 = ((int((fTemp99 > fTemp100)))?1:((int(((fTemp103 - floorf(fTemp103)) < fTemp102)))?2:0));
			fRec67[0] = square_blep_x(iTemp104, ((int((fTemp100 < 0.5f)))?1.0f:-1.0f), fTemp100, fTemp102);
			float 	fRec68 = square_blep_prev(iTemp104, fRec67[1], fTemp99, fTemp102);
			fRec66[0] = (fRec66[1] + (fConst6 * (fRec68 - fRec66[1])));
			fRec65[0] = (fConst3 * ((fRec66[0] - fRec66[1]) + fRec65[1]));
			float fTemp105 = ((fConst1 * float((4978.031739553295f * fTemp0))) + fRec76[1]);
			fRec76[0] = (fTemp105 - floorf(fTemp105));
			iRec75[0] = ((int(((fRec76[0] - fRec76[1]) < 0)))?(1 - iRec75[1]):iRec75[1]);
			float fTemp106 = (fRec76[0] + iRec75[0]);
			fVec17[0] = fTemp106;
			float fTemp107 = (0.5f * fVec17[1]);
			float fTemp108 = (0.5f * fVec17[0]);
			float fTemp109 = (1 + fTemp108);
			float fTemp110 = (fTemp109 - (fTemp107 + floorf((fTemp109 - fTemp107))));
			float fTemp111 = (0.5f * (1.0f + fVec17[0]));
			int iTemp112 = ((int((fTemp107 > fTemp108)))?1:((int(((fTemp111 - floorf(fTemp111)) < fTemp110)))?2:0));
			fRec73[0] = square_blep_x(iTemp112, ((int((fTemp108 < 0.5f)))?1.0f:-1.0f), fTemp108, fTemp110);
			float 	fRec74 = square_blep_prev(iTemp112, fRec73[1], fTemp107, fTemp110);
			fRec72[0] = (fRec72[1] + (fConst6 * (fRec74 - fRec72[1])));
			fRec71[0] = (fConst3 * ((fRec72[0] - fRec72[1]) + fRec71[1]));
			float fTemp113 = ((fConst1 * float((5274.04091060592f * fTemp0))) + fRec82[1]);
			fRec82[0] = (fTemp113 - floorf(fTemp113));
			iRec81[0] = ((int(((fRec82[0] - fRec82[1]) < 0)))?(1 - iRec81[1]):iRec81[1]);
			float fTemp114 = (fRec82[0] + iRec81[0]);
			fVec18[0] = fTemp114;
			float fTemp115 = (0.5f * fVec18[1]);
			float fTemp116 = (0.5f * fVec18[0]);
			float fTemp117 = (1 + fTemp116);
			float fTemp118 = (fTemp117 - (fTemp115 + floorf((fTemp117 - fTemp115))));
			float fTemp119 = (0.5f * (1.0f + fVec18[0]));
			int iTemp120 = ((int((fTemp115 > fTemp116)))?1:((int(((fTemp119 - floorf(fTemp119)) < fTemp118)))?2:0));
			fRec79[0] = square_blep_x(iTemp120, ((int((fTemp116 < 0.5f)))?1.0f:-1.0f), fTemp116, fTemp118);
			float 	fRec80 = square_blep_prev(iTemp120, fRec79[1], fTemp115, fTemp118);
			fRec78[0] = (fRec78[1] + (fConst7 * (fRec80 - fRec78[1])));
			fRec77[0] = (fConst3 * ((fRec78[0] - fRec78[1]) + fRec77[1]));
			float fTemp121 = (1 + fTemp18);
			float fTemp122 = (fTemp121 - (fTemp19 + floorf((fTemp121 - fTemp19))));
			float fTemp123 = (0.5f * (1.0f + fVec2[0]));
			int iTemp124 = ((int((fTemp19 > fTemp18)))?1:((int(((fTemp123 - floorf(fTemp123)) < fTemp122)))?2:0));
			fRec85[0] = square_blep_x(iTemp124, ((int((fTemp18 < 0.5f)))?1.0f:-1.0f), fTemp18, fTemp122);
			float 	fRec86 = square_blep_prev(iTemp124, fRec85[1], fTemp19, fTemp122);
			fRec84[0] = (fRec84[1] + (fConst7 * (fRec86 - fRec84[1])));
			fRec83[0] = (fConst3 * ((fRec84[0] - fRec84[1]) + fRec83[1]));
			float fTemp125 = (1 + fTemp7);
			float fTemp126 = (fTemp125 - (fTemp8 + floorf((fTemp125 - fTemp8))));
			float fTemp127 = (0.5f * (1.0f + fVec0[0]));
			int iTemp128 = ((int((fTemp8 > fTemp7)))?1:((int(((fTemp127 - floorf(fTemp127)) < fTemp126)))?2:0));
			fRec89[0] = square_blep_x(iTemp128, ((int((fTemp7 < 0.5f)))?1.0f:-1.0f), fTemp7, fTemp126);
			float 	fRec90 = square_blep_prev(iTemp128, fRec89[1], fTemp8, fTemp126);
			fRec88[0] = (fRec88[1] + (fConst7 * (fRec90 - fRec88[1])));
			fRec87[0] = (fConst3 * ((fRec88[0] - fRec88[1]) + fRec87[1]));
			float fTemp129 = (1 + fTemp29);
			float fTemp130 = (fTemp129 - (fTemp30 + floorf((fTemp129 - fTemp30))));
			float fTemp131 = (0.5f * (1.0f + fVec4[0]));
			int iTemp132 = ((int((fTemp30 > fTemp29)))?1:((int(((fTemp131 - floorf(fTemp131)) < fTemp130)))?2:0));
			fRec93[0] = square_blep_x(iTemp132, ((int((fTemp29 < 0.5f)))?1.0f:-1.0f), fTemp29, fTemp130);
			float 	fRec94 = square_blep_prev(iTemp132, fRec93[1], fTemp30, fTemp130);
			fRec92[0] = (fRec92[1] + (fConst7 * (fRec94 - fRec92[1])));
			fRec91[0] = (fConst3 * ((fRec92[0] - fRec92[1]) + fRec91[1]));
			float fTemp133 = (1 + fTemp40);
			float fTemp134 = (fTemp133 - (fTemp41 + floorf((fTemp133 - fTemp41))));
			float fTemp135 = (0.5f * (1.0f + fVec6[0]));
			int iTemp136 = ((int((fTemp41 > fTemp40)))?1:((int(((fTemp135 - floorf(fTemp135)) < fTemp134)))?2:0));
			fRec97[0] = square_blep_x(iTemp136, ((int((fTemp40 < 0.5f)))?1.0f:-1.0f), fTemp40, fTemp134);
			float 	fRec98 = square_blep_prev(iTemp136, fRec97[1], fTemp41, fTemp134);
			fRec96[0] = (fRec96[1] + (fConst8 * (fRec98 - fRec96[1])));
			fRec95[0] = (fConst3 * ((fRec96[0] - fRec96[1]) + fRec95[1]));
			float fTemp137 = (1 + fTemp51);
			float fTemp138 = (fTemp137 - (fTemp52 + floorf((fTemp137 - fTemp52))));
			float fTemp139 = (0.5f * (1.0f + fVec8[0]));
			int iTemp140 = ((int((fTemp52 > fTemp51)))?1:((int(((fTemp139 - floorf(fTemp139)) < fTemp138)))?2:0));
			fRec101[0] = square_blep_x(iTemp140, ((int((fTemp51 < 0.5f)))?1.0f:-1.0f), fTemp51, fTemp138);
			float 	fRec102 = square_blep_prev(iTemp140, fRec101[1], fTemp52, fTemp138);
			fRec100[0] = (fRec100[1] + (fConst8 * (fRec102 - fRec100[1])));
			fRec99[0] = (fConst3 * ((fRec100[0] - fRec100[1]) + fRec99[1]));
			float fTemp141 = (1 + fTemp62);
			float fTemp142 = (fTemp141 - (fTemp63 + floorf((fTemp141 - fTemp63))));
			float fTemp143 = (0.5f * (1.0f + fVec10[0]));
			int iTemp144 = ((int((fTemp63 > fTemp62)))?1:((int(((fTemp143 - floorf(fTemp143)) < fTemp142)))?2:0));
			fRec105[0] = square_blep_x(iTemp144, ((int((fTemp62 < 0.5f)))?1.0f:-1.0f), fTemp62, fTemp142);
			float 	fRec106 = square_blep_prev(iTemp144, fRec105[1], fTemp63, fTemp142);
			fRec104[0] = (fRec104[1] + (fConst8 * (fRec106 - fRec104[1])));
			fRec103[0] = (fConst3 * ((fRec104[0] - fRec104[1]) + fRec103[1]));
			float fTemp145 = (1 + fTemp73);
			float fTemp146 = (fTemp145 - (fTemp74 + floorf((fTemp145 - fTemp74))));
			float fTemp147 = (0.5f * (1.0f + fVec12[0]));
			int iTemp148 = ((int((fTemp74 > fTemp73)))?1:((int(((fTemp147 - floorf(fTemp147)) < fTemp146)))?2:0));
			fRec109[0] = square_blep_x(iTemp148, ((int((fTemp73 < 0.5f)))?1.0f:-1.0f), fTemp73, fTemp146);
			float 	fRec110 = square_blep_prev(iTemp148, fRec109[1], fTemp74, fTemp146);
			fRec108[0] = (fRec108[1] + (fConst8 * (fRec110 - fRec108[1])));
			fRec107[0] = (fConst3 * ((fRec108[0] - fRec108[1]) + fRec107[1]));
			iRec115[0] = ((int(((fTemp116 - fTemp115) < 0)))?(1 - iRec115[1]):iRec115[1]);
			float fTemp149 = (iRec115[0] + fTemp116);
			fVec19[0] = fTemp149;
			float fTemp150 = (0.5f * fVec19[1]);
			float fTemp151 = (0.5f * fVec19[0]);
			float fTemp152 = (1 + fTemp151);
			float fTemp153 = (fTemp152 - (fTemp150 + floorf((fTemp152 - fTemp150))));
			float fTemp154 = (0.5f * (1.0f + fVec19[0]));
			int iTemp155 = ((int((fTemp150 > fTemp151)))?1:((int(((fTemp154 - floorf(fTemp154)) < fTemp153)))?2:0));
			fRec113[0] = square_blep_x(iTemp155, ((int((fTemp151 < 0.5f)))?1.0f:-1.0f), fTemp151, fTemp153);
			float 	fRec114 = square_blep_prev(iTemp155, fRec113[1], fTemp150, fTemp153);
			fRec112[0] = (fRec112[1] + (fConst4 * (fRec114 - fRec112[1])));
			fRec111[0] = (fConst3 * ((fRec112[0] - fRec112[1]) + fRec111[1]));
			iRec120[0] = ((int(((fTemp108 - fTemp107) < 0)))?(1 - iRec120[1]):iRec120[1]);
			float fTemp156 = (iRec120[0] + fTemp108);
			fVec20[0] = fTemp156;
			float fTemp157 = (0.5f * fVec20[1]);
			float fTemp158 = (0.5f * fVec20[0]);
			float fTemp159 = (1 + fTemp158);
			float fTemp160 = (fTemp159 - (fTemp157 + floorf((fTemp159 - fTemp157))));
			float fTemp161 = (0.5f * (1.0f + fVec20[0]));
			int iTemp162 = ((int((fTemp157 > fTemp158)))?1:((int(((fTemp161 - floorf(fTemp161)) < fTemp160)))?2:0));
			fRec118[0] = square_blep_x(iTemp162, ((int((fTemp158 < 0.5f)))?1.0f:-1.0f), fTemp158, fTemp160);
			float 	fRec119 = square_blep_prev(iTemp162, fRec118[1], fTemp157, fTemp160);
			fRec117[0] = (fRec117[1] + (fConst9 * (fRec119 - fRec117[1])));
			fRec116[0] = (fConst3 * ((fRec117[0] - fRec117[1]) + fRec116[1]));
			iRec125[0] = ((int(((fTemp100 - fTemp99) < 0)))?(1 - iRec125[1]):iRec125[1]);
			float fTemp163 = (iRec125[0] + fTemp100);
			fVec21[0] = fTemp163;
			float fTemp164 = (0.5f * fVec21[1]);
			float fTemp165 = (0.5f * fVec21[0]);
			float fTemp166 = (1 + fTemp165);
			float fTemp167 = (fTemp166 - (fTemp164 + floorf((fTemp166 - fTemp164))));
			float fTemp168 = (0.5f * (1.0f + fVec21[0]));
			int iTemp169 = ((int((fTemp164 > fTemp165)))?1:((int(((fTemp168 - floorf(fTemp168)) < fTemp167)))?2:0));
			fRec123[0] = square_blep_x(iTemp169, ((int((fTemp165 < 0.5f)))?1.0f:-1.0f), fTemp165, fTemp167);
			float 	fRec124 = square_blep_prev(iTemp169, fRec123[1], fTemp164, fTemp167);
			fRec122[0] = (fRec122[1] + (fConst9 * (fRec124 - fRec122[1])));
			fRec121[0] = (fConst3 * ((fRec122[0] - fRec122[1]) + fRec121[1]));
			iRec130[0] = ((int(((fTemp92 - fTemp91) < 0)))?(1 - iRec130[1]):iRec130[1]);
			float fTemp170 = (iRec130[0] + fTemp92);
			fVec22[0] = fTemp170;
			float fTemp171 = (0.5f * fVec22[1]);
			float fTemp172 = (0.5f * fVec22[0]);
			float fTemp173 = (1 + fTemp172);
			float fTemp174 = (fTemp173 - (fTemp171 + floorf((fTemp173 - fTemp171))));
			float fTemp175 = (0.5f * (1.0f + fVec22[0]));
			int iTemp176 = ((int((fTemp171 > fTemp172)))?1:((int(((fTemp175 - floorf(fTemp175)) < fTemp174)))?2:0));
			fRec128[0] = square_blep_x(iTemp176, ((int((fTemp172 < 0.5f)))?1.0f:-1.0f), fTemp172, fTemp174);
			float 	fRec129 = square_blep_prev(iTemp176, fRec128[1], fTemp171, fTemp174);
			fRec127[0] = (fRec127[1] + (fConst9 * (fRec129 - fRec127[1])));
			fRec126[0] = (fConst3 * ((fRec127[0] - fRec127[1]) + fRec126[1]));
			iRec135[0] = ((int(((fTemp85 - fTemp84) < 0)))?(1 - iRec135[1]):iRec135[1]);
			float fTemp177 = (iRec135[0] + fTemp85);
			fVec23[0] = fTemp177;
			float fTemp178 = (0.5f * fVec23[1]);
			float fTemp179 = (0.5f * fVec23[0]);
			float fTemp180 = (1 + fTemp179);
			float fTemp181 = (fTemp180 - (fTemp178 + floorf((fTemp180 - fTemp178))));
			float fTemp182 = (0.5f * (1.0f + fVec23[0]));
			int iTemp183 = ((int((fTemp178 > fTemp179)))?1:((int(((fTemp182 - floorf(fTemp182)) < fTemp181)))?2:0));
			fRec133[0] = square_blep_x(iTemp183, ((int((fTemp179 < 0.5f)))?1.0f:-1.0f), fTemp179, fTemp181);
			float 	fRec134 = square_blep_prev(iTemp183, fRec133[1], fTemp178, fTemp181);
			fRec132[0] = (fRec132[1] + (fConst9 * (fRec134 - fRec132[1])));
			fRec131[0] = (fConst3 * ((fRec132[0] - fRec132[1]) + fRec131[1]));
			iRec140[0] = ((int(((fTemp77 - fTemp76) < 0)))?(1 - iRec140[1]):iRec140[1]);
			float fTemp184 = (iRec140[0] + fTemp77);
			fVec24[0] = fTemp184;
			float fTemp185 = (0.5f * fVec24[1]);
			float fTemp186 = (0.5f * fVec24[0]);
			float fTemp187 = (1 + fTemp186);
			float fTemp188 = (fTemp187 - (fTemp185 + floorf((fTemp187 - fTemp185))));
			float fTemp189 = (0.5f * (1.0f + fVec24[0]));
			int iTemp190 = ((int((fTemp185 > fTemp186)))?1:((int(((fTemp189 - floorf(fTemp189)) < fTemp188)))?2:0));
			fRec138[0] = square_blep_x(iTemp190, ((int((fTemp186 < 0.5f)))?1.0f:-1.0f), fTemp186, fTemp188);
			float 	fRec139 = square_blep_prev(iTemp190, fRec138[1], fTemp185, fTemp188);
			fRec137[0] = (fRec137[1] + (fConst10 * (fRec139 - fRec137[1])));
			fRec136[0] = (fConst3 * ((fRec137[0] - fRec137[1]) + fRec136[1]));
			iRec145[0] = ((int(((fTemp66 - fTemp65) < 0)))?(1 - iRec145[1]):iRec145[1]);
			float fTemp191 = (iRec145[0] + fTemp66);
			fVec25[0] = fTemp191;
			float fTemp192 = (0.5f * fVec25[1]);
			float fTemp193 = (0.5f * fVec25[0]);
			float fTemp194 = (1 + fTemp193);
			float fTemp195 = (fTemp194 - (fTemp192 + floorf((fTemp194 - fTemp192))));
			float fTemp196 = (0.5f * (1.0f + fVec25[0]));
			int iTemp197 = ((int((fTemp192 > fTemp193)))?1:((int(((fTemp196 - floorf(fTemp196)) < fTemp195)))?2:0));
			fRec143[0] = square_blep_x(iTemp197, ((int((fTemp193 < 0.5f)))?1.0f:-1.0f), fTemp193, fTemp195);
			float 	fRec144 = square_blep_prev(iTemp197, fRec143[1], fTemp192, fTemp195);
			fRec142[0] = (fRec142[1] + (fConst10 * (fRec144 - fRec142[1])));
			fRec141[0] = (fConst3 * ((fRec142[0] - fRec142[1]) + fRec141[1]));
			iRec150[0] = ((int(((fTemp55 - fTemp54) < 0)))?(1 - iRec150[1]):iRec150[1]);
			float fTemp198 = (iRec150[0] + fTemp55);
			fVec26[0] = fTemp198;
			float fTemp199 = (0.5f * fVec26[1]);
			float fTemp200 = (0.5f * fVec26[0]);
			float fTemp201 = (1 + fTemp200);
			float fTemp202 = (fTemp201 - (fTemp199 + floorf((fTemp201 - fTemp199))));
			float fTemp203 = (0.5f * (1.0f + fVec26[0]));
			int iTemp204 = ((int((fTemp199 > fTemp200)))?1:((int(((fTemp203 - floorf(fTemp203)) < fTemp202)))?2:0));
			fRec148[0] = square_blep_x(iTemp204, ((int((fTemp200 < 0.5f)))?1.0f:-1.0f), fTemp200, fTemp202);
			float 	fRec149 = square_blep_prev(iTemp204, fRec148[1], fTemp199, fTemp202);
			fRec147[0] = (fRec147[1] + (fConst10 * (fRec149 - fRec147[1])));
			fRec146[0] = (fConst3 * ((fRec147[0] - fRec147[1]) + fRec146[1]));
			iRec155[0] = ((int(((fTemp44 - fTemp43) < 0)))?(1 - iRec155[1]):iRec155[1]);
			float fTemp205 = (iRec155[0] + fTemp44);
			fVec27[0] = fTemp205;
			float fTemp206 = (0.5f * fVec27[1]);
			float fTemp207 = (0.5f * fVec27[0]);
			float fTemp208 = (1 + fTemp207);
			float fTemp209 = (fTemp208 - (fTemp206 + floorf((fTemp208 - fTemp206))));
			float fTemp210 = (0.5f * (1.0f + fVec27[0]));
			int iTemp211 = ((int((fTemp206 > fTemp207)))?1:((int(((fTemp210 - floorf(fTemp210)) < fTemp209)))?2:0));
			fRec153[0] = square_blep_x(iTemp211, ((int((fTemp207 < 0.5f)))?1.0f:-1.0f), fTemp207, fTemp209);
			float 	fRec154 = square_blep_prev(iTemp211, fRec153[1], fTemp206, fTemp209);
			fRec152[0] = (fRec152[1] + (fConst10 * (fRec154 - fRec152[1])));
			fRec151[0] = (fConst3 * ((fRec152[0] - fRec152[1]) + fRec151[1]));
			iRec160[0] = ((int(((fTemp33 - fTemp32) < 0)))?(1 - iRec160[1]):iRec160[1]);
			float fTemp212 = (iRec160[0] + fTemp33);
			fVec28[0] = fTemp212;
			float fTemp213 = (0.5f * fVec28[1]);
			float fTemp214 = (0.5f * fVec28[0]);
			float fTemp215 = (1 + fTemp214);
			float fTemp216 = (fTemp215 - (fTemp213 + floorf((fTemp215 - fTemp213))));
			float fTemp217 = (0.5f * (1.0f + fVec28[0]));
			int iTemp218 = ((int((fTemp213 > fTemp214)))?1:((int(((fTemp217 - floorf(fTemp217)) < fTemp216)))?2:0));
			fRec158[0] = square_blep_x(iTemp218, ((int((fTemp214 < 0.5f)))?1.0f:-1.0f), fTemp214, fTemp216);
			float 	fRec159 = square_blep_prev(iTemp218, fRec158[1], fTemp213, fTemp216);
			fRec157[0] = (fRec157[1] + (fConst11 * (fRec159 - fRec157[1])));
			fRec156[0] = (fConst3 * ((fRec157[0] - fRec157[1]) + fRec156[1]));
			iRec165[0] = ((int(((fTemp11 - fTemp10) < 0)))?(1 - iRec165[1]):iRec165[1]);
			float fTemp219 = (iRec165[0] + fTemp11);
			fVec29[0] = fTemp219;
			float fTemp220 = (0.5f * fVec29[1]);
			float fTemp221 = (0.5f * fVec29[0]);
			float fTemp222 = (1 + fTemp221);
			float fTemp223 = (fTemp222 - (fTemp220 + floorf((fTemp222 - fTemp220))));
			float fTemp224 = (0.5f * (1.0f + fVec29[0]));
			int iTemp225 = ((int((fTemp220 > fTemp221)))?1:((int(((fTemp224 - floorf(fTemp224)) < fTemp223)))?2:0));
			fRec163[0] = square_blep_x(iTemp225, ((int((fTemp221 < 0.5f)))?1.0f:-1.0f), fTemp221, fTemp223);
			float 	fRec164 = square_blep_prev(iTemp225, fRec163[1], fTemp220, fTemp223);
			fRec162[0] = (fRec162[1] + (fConst11 * (fRec164 - fRec162[1])));
			fRec161[0] = (fConst3 * ((fRec162[0] - fRec162[1]) + fRec161[1]));
			iRec170[0] = ((int(((fTemp22 - fTemp21) < 0)))?(1 - iRec170[1]):iRec170[1]);
			float fTemp226 = (iRec170[0] + fTemp22);
			fVec30[0] = fTemp226;
			float fTemp227 = (0.5f * fVec30[1]);
			float fTemp228 = (0.5f * fVec30[0]);
			float fTemp229 = (1 + fTemp228);
			float fTemp230 = (fTemp229 - (fTemp227 + floorf((fTemp229 - fTemp227))));
			float fTemp231 = (0.5f * (1.0f + fVec30[0]));
			int iTemp232 = ((int((fTemp227 > fTemp228)))?1:((int(((fTemp231 - floorf(fTemp231)) < fTemp230)))?2:0));
			fRec168[0] = square_blep_x(iTemp232, ((int((fTemp228 < 0.5f)))?1.0f:-1.0f), fTemp228, fTemp230);
			float 	fRec169 = square_blep_prev(iTemp232, fRec168[1], fTemp227, fTemp230);
			fRec167[0] = (fRec167[1] + (fConst11 * (fRec169 - fRec167[1])));
			fRec166[0] = (fConst3 * ((fRec167[0] - fRec167[1]) + fRec166[1]));
			iRec175[0] = ((int(((fTemp151 - fTemp150) < 0)))?(1 - iRec175[1]):iRec175[1]);
			float fTemp233 = (iRec175[0] + fTemp151);
			fVec31[0] = fTemp233;
			float fTemp234 = (0.5f * fVec31[1]);
			float fTemp235 = (0.5f * fVec31[0]);
			float fTemp236 = (1 + fTemp235);
			float fTemp237 = (fTemp236 - (fTemp234 + floorf((fTemp236 - fTemp234))));
			float fTemp238 = (0.5f * (1.0f + fVec31[0]));
			int iTemp239 = ((int((fTemp234 > fTemp235)))?1:((int(((fTemp238 - floorf(fTemp238)) < fTemp237)))?2:0));
			fRec173[0] = square_blep_x(iTemp239, ((int((fTemp235 < 0.5f)))?1.0f:-1.0f), fTemp235, fTemp237);
			float 	fRec174 = square_blep_prev(iTemp239, fRec173[1], fTemp234, fTemp237);
			fRec172[0] = (fRec172[1] + (fConst11 * (fRec174 - fRec172[1])));
			fRec171[0] = (fConst3 * ((fRec172[0] - fRec172[1]) + fRec171[1]));
			iRec180[0] = ((int(((fTemp158 - fTemp157) < 0)))?(1 - iRec180[1]):iRec180[1]);
			float fTemp240 = (iRec180[0] + fTemp158);
			fVec32[0] = fTemp240;
			float fTemp241 = (0.5f * fVec32[1]);
			float fTemp242 = (0.5f * fVec32[0]);
			float fTemp243 = (1 + fTemp242);
			float fTemp244 = (fTemp243 - (fTemp241 + floorf((fTemp243 - fTemp241))));
			float fTemp245 = (0.5f * (1.0f + fVec32[0]));
			int iTemp246 = ((int((fTemp241 > fTemp242)))?1:((int(((fTemp245 - floorf(fTemp245)) < fTemp244)))?2:0));
			fRec178[0] = square_blep_x(iTemp246, ((int((fTemp242 < 0.5f)))?1.0f:-1.0f), fTemp242, fTemp244);
			float 	fRec179 = square_blep_prev(iTemp246, fRec178[1], fTemp241, fTemp244);
			fRec177[0] = (fRec177[1] + (fConst12 * (fRec179 - fRec177[1])));
			fRec176[0] = (fConst3 * ((fRec177[0] - fRec177[1]) + fRec176[1]));
			iRec185[0] = ((int(((fTemp165 - fTemp164) < 0)))?(1 - iRec185[1]):iRec185[1]);
			float fTemp247 = (iRec185[0] + fTemp165);
			fVec33[0] = fTemp247;
			float fTemp248 = (0.5f * fVec33[1]);
			float fTemp249 = (0.5f * fVec33[0]);
			float fTemp250 = (1 + fTemp249);
			float fTemp251 = (fTemp250 - (fTemp248 + floorf((fTemp250 - fTemp248))));
			float fTemp252 = (0.5f * (1.0f + fVec33[0]));
			int iTemp253 = ((int((fTemp248 > fTemp249)))?1:((int(((fTemp252 - floorf(fTemp252)) < fTemp251)))?2:0));
			fRec183[0] = square_blep_x(iTemp253, ((int((fTemp249 < 0.5f)))?1.0f:-1.0f), fTemp249, fTemp251);
			float 	fRec184 = square_blep_prev(iTemp253, fRec183[1], fTemp248, fTemp251);
			fRec182[0] = (fRec182[1] + (fConst12 * (fRec184 - fRec182[1])));
			fRec181[0] = (fConst3 * ((fRec182[0] - fRec182[1]) + fRec181[1]));
			iRec190[0] = ((int(((fTemp172 - fTemp171) < 0)))?(1 - iRec190[1]):iRec190[1]);
			float fTemp254 = (iRec190[0] + fTemp172);
			fVec34[0] = fTemp254;
			float fTemp255 = (0.5f * fVec34[1]);
			float fTemp256 = (0.5f * fVec34[0]);
			float fTemp257 = (1 + fTemp256);
			float fTemp258 = (fTemp257 - (fTemp255 + floorf((fTemp257 - fTemp255))));
			float fTemp259 = (0.5f * (1.0f + fVec34[0]));
			int iTemp260 = ((int((fTemp255 > fTemp256)))?1:((int(((fTemp259 - floorf(fTemp259)) < fTemp258)))?2:0));
			fRec188[0] = square_blep_x(iTemp260, ((int((fTemp256 < 0.5f)))?1.0f:-1.0f), fTemp256, fTemp258);
			float 	fRec189 = square_blep_prev(iTemp260, fRec188[1], fTemp255, fTemp258);
			fRec187[0] = (fRec187[1] + (fConst12 * (fRec189 - fRec187[1])));
			fRec186[0] = (fConst3 * ((fRec187[0] - fRec187[1]) + fRec186[1]));
			iRec195[0] = ((int(((fTemp179 - fTemp178) < 0)))?(1 - iRec195[1]):iRec195[1]);
			float fTemp261 = (iRec195[0] + fTemp179);
			fVec35[0] = fTemp261;
			float fTemp262 = (0.5f * fVec35[1]);
			float fTemp263 = (0.5f * fVec35[0]);
			float fTemp264 = (1 + fTemp263);
			float fTemp265 = (fTemp264 - (fTemp262 + floorf((fTemp264 - fTemp262))));
			float fTemp266 = (0.5f * (1.0f + fVec35[0]));
			int iTemp267 = ((int((fTemp262 > fTemp263)))?1:((int(((fTemp266 - floorf(fTemp266)) < fTemp265)))?2:0));
			fRec193[0] = square_blep_x(iTemp267, ((int((fTemp263 < 0.5f)))?1.0f:-1.0f), fTemp263, fTemp265);
			float 	fRec194 = square_blep_prev(iTemp267, fRec193[1], fTemp262, fTemp265);
			fRec192[0] = (fRec192[1] + (fConst12 * (fRec194 - fRec192[1])));
			fRec191[0] = (fConst3 * ((fRec192[0] - fRec192[1]) + fRec191[1]));
			int iTemp268 = ((int((fRec70[1] > fRec70[0])))?1:0);
			float fTemp269 = (1 + fRec70[0]);
			float fTemp270 = (0 - ((fRec70[1] + floorf((fTemp269 - fRec70[1]))) - fTemp269));
			fRec197[0] = saw_blep_x(iTemp268, (0 - (2 * (fRec70[0] - 0.5f))), fRec70[0], fTemp270);
			fRec198[0] = saw_blep_prev(iTemp268, fRec197[1], fRec70[1], fTemp270);
			fRec196[0] = (fConst3 * (((1.95f * fRec198[0]) - (1.95f * fRec198[1])) + fRec196[1]));
			int iTemp271 = ((int((fRec76[1] > fRec76[0])))?1:0);
			float fTemp272 = (1 + fRec76[0]);
			float fTemp273 = (0 - ((fRec76[1] + floorf((fTemp272 - fRec76[1]))) - fTemp272));
			fRec200[0] = saw_blep_x(iTemp271, (0 - (2 * (fRec76[0] - 0.5f))), fRec76[0], fTemp273);
			fRec201[0] = saw_blep_prev(iTemp271, fRec200[1], fRec76[1], fTemp273);
			fRec199[0] = (fConst3 * (((1.95f * fRec201[0]) - (1.95f * fRec201[1])) + fRec199[1]));
			int iTemp274 = ((int((fRec82[1] > fRec82[0])))?1:0);
			float fTemp275 = (1 + fRec82[0]);
			float fTemp276 = (0 - ((fRec82[1] + floorf((fTemp275 - fRec82[1]))) - fTemp275));
			fRec203[0] = saw_blep_x(iTemp274, (0 - (2 * (fRec82[0] - 0.5f))), fRec82[0], fTemp276);
			fRec204[0] = saw_blep_prev(iTemp274, fRec203[1], fRec82[1], fTemp276);
			fRec202[0] = (fConst3 * (((1.95f * fRec204[0]) - (1.95f * fRec204[1])) + fRec202[1]));
			int iTemp277 = ((int((fRec17[1] > fRec17[0])))?1:0);
			float fTemp278 = (1 + fRec17[0]);
			float fTemp279 = (0 - ((fRec17[1] + floorf((fTemp278 - fRec17[1]))) - fTemp278));
			fRec206[0] = saw_blep_x(iTemp277, (0 - (2 * (fRec17[0] - 0.5f))), fRec17[0], fTemp279);
			fRec207[0] = saw_blep_prev(iTemp277, fRec206[1], fRec17[1], fTemp279);
			fRec205[0] = (fConst3 * (((1.95f * fRec207[0]) - (1.95f * fRec207[1])) + fRec205[1]));
			int iTemp280 = ((int((fRec10[1] > fRec10[0])))?1:0);
			float fTemp281 = (1 + fRec10[0]);
			float fTemp282 = (0 - ((fRec10[1] + floorf((fTemp281 - fRec10[1]))) - fTemp281));
			fRec209[0] = saw_blep_x(iTemp280, (0 - (2 * (fRec10[0] - 0.5f))), fRec10[0], fTemp282);
			fRec210[0] = saw_blep_prev(iTemp280, fRec209[1], fRec10[1], fTemp282);
			fRec208[0] = (fConst3 * (((1.95f * fRec210[0]) - (1.95f * fRec210[1])) + fRec208[1]));
			int iTemp283 = ((int((fRec24[1] > fRec24[0])))?1:0);
			float fTemp284 = (1 + fRec24[0]);
			float fTemp285 = (0 - ((fRec24[1] + floorf((fTemp284 - fRec24[1]))) - fTemp284));
			fRec212[0] = saw_blep_x(iTemp283, (0 - (2 * (fRec24[0] - 0.5f))), fRec24[0], fTemp285);
			fRec213[0] = saw_blep_prev(iTemp283, fRec212[1], fRec24[1], fTemp285);
			fRec211[0] = (fConst3 * (((1.95f * fRec213[0]) - (1.95f * fRec213[1])) + fRec211[1]));
			int iTemp286 = ((int((fRec31[1] > fRec31[0])))?1:0);
			float fTemp287 = (1 + fRec31[0]);
			float fTemp288 = (0 - ((fRec31[1] + floorf((fTemp287 - fRec31[1]))) - fTemp287));
			fRec215[0] = saw_blep_x(iTemp286, (0 - (2 * (fRec31[0] - 0.5f))), fRec31[0], fTemp288);
			fRec216[0] = saw_blep_prev(iTemp286, fRec215[1], fRec31[1], fTemp288);
			fRec214[0] = (fConst3 * (((1.95f * fRec216[0]) - (1.95f * fRec216[1])) + fRec214[1]));
			int iTemp289 = ((int((fRec38[1] > fRec38[0])))?1:0);
			float fTemp290 = (1 + fRec38[0]);
			float fTemp291 = (0 - ((fRec38[1] + floorf((fTemp290 - fRec38[1]))) - fTemp290));
			fRec218[0] = saw_blep_x(iTemp289, (0 - (2 * (fRec38[0] - 0.5f))), fRec38[0], fTemp291);
			fRec219[0] = saw_blep_prev(iTemp289, fRec218[1], fRec38[1], fTemp291);
			fRec217[0] = (fConst3 * (((1.95f * fRec219[0]) - (1.95f * fRec219[1])) + fRec217[1]));
			int iTemp292 = ((int((fRec45[1] > fRec45[0])))?1:0);
			float fTemp293 = (1 + fRec45[0]);
			float fTemp294 = (0 - ((fRec45[1] + floorf((fTemp293 - fRec45[1]))) - fTemp293));
			fRec221[0] = saw_blep_x(iTemp292, (0 - (2 * (fRec45[0] - 0.5f))), fRec45[0], fTemp294);
			fRec222[0] = saw_blep_prev(iTemp292, fRec221[1], fRec45[1], fTemp294);
			fRec220[0] = (fConst3 * (((1.95f * fRec222[0]) - (1.95f * fRec222[1])) + fRec220[1]));
			int iTemp295 = ((int((fRec52[1] > fRec52[0])))?1:0);
			float fTemp296 = (1 + fRec52[0]);
			float fTemp297 = (0 - ((fRec52[1] + floorf((fTemp296 - fRec52[1]))) - fTemp296));
			fRec224[0] = saw_blep_x(iTemp295, (0 - (2 * (fRec52[0] - 0.5f))), fRec52[0], fTemp297);
			fRec225[0] = saw_blep_prev(iTemp295, fRec224[1], fRec52[1], fTemp297);
			fRec223[0] = (fConst3 * (((1.95f * fRec225[0]) - (1.95f * fRec225[1])) + fRec223[1]));
			int iTemp298 = ((int((fRec59[1] > fRec59[0])))?1:0);
			float fTemp299 = (1 + fRec59[0]);
			float fTemp300 = (0 - ((fRec59[1] + floorf((fTemp299 - fRec59[1]))) - fTemp299));
			fRec227[0] = saw_blep_x(iTemp298, (0 - (2 * (fRec59[0] - 0.5f))), fRec59[0], fTemp300);
			fRec228[0] = saw_blep_prev(iTemp298, fRec227[1], fRec59[1], fTemp300);
			fRec226[0] = (fConst3 * (((1.95f * fRec228[0]) - (1.95f * fRec228[1])) + fRec226[1]));
			float fTemp301 = ((fSlow77 * fRec226[0]) + ((fSlow73 * fRec223[0]) + ((fSlow70 * fRec220[0]) + ((fSlow67 * fRec217[0]) + ((fSlow64 * fRec214[0]) + ((fSlow61 * fRec211[0]) + ((fSlow58 * fRec208[0]) + ((fSlow55 * fRec205[0]) + ((fSlow52 * fRec202[0]) + ((fSlow49 * fRec199[0]) + ((fSlow46 * fRec196[0]) + (((fSlow43 * (((((((((((((((((fSlow41 * fRec191[0]) + (fSlow40 * fRec186[0])) + (fSlow39 * fRec181[0])) + (fSlow38 * fRec176[0])) + (fSlow37 * fRec171[0])) + (fSlow36 * fRec166[0])) + (fSlow35 * fRec161[0])) + (fSlow34 * fRec156[0])) + (fSlow33 * fRec151[0])) + (fSlow32 * fRec146[0])) + (fSlow31 * fRec141[0])) + (fSlow30 * fRec136[0])) + (fSlow29 * fRec131[0])) + (fSlow28 * fRec126[0])) + (fSlow27 * fRec121[0])) + (fSlow26 * fRec116[0])) + (fSlow25 * fRec111[0]))) + ((fSlow24 * fRec107[0]) + ((fSlow23 * fRec103[0]) + ((fSlow22 * fRec99[0]) + ((fSlow21 * fRec95[0]) + ((fSlow20 * fRec91[0]) + ((fSlow19 * fRec87[0]) + ((fSlow18 * fRec83[0]) + ((fSlow17 * fRec77[0]) + ((fSlow16 * fRec71[0]) + ((fSlow15 * fRec65[0]) + ((fSlow14 * fRec60[0]) + ((fSlow13 * fRec54[0]) + ((fSlow12 * fRec47[0]) + ((fSlow11 * fRec40[0]) + ((fSlow10 * fRec33[0]) + ((fSlow9 * fRec26[0]) + ((fSlow8 * fRec19[0]) + ((fSlow7 * fRec12[0]) + (fSlow6 * fRec5[0])))))))))))))))))))) + (fSlow5 * fRec0[0])))))))))))));
			float fTemp302 = ((fSlow76 * fRec211[0]) + ((fSlow72 * fRec208[0]) + ((fSlow69 * fRec205[0]) + ((fSlow66 * fRec202[0]) + ((fSlow63 * fRec199[0]) + ((fSlow60 * fRec196[0]) + ((fSlow57 * fRec0[0]) + ((fSlow54 * fRec226[0]) + ((fSlow51 * fRec107[0]) + ((fSlow48 * fRec103[0]) + ((fSlow45 * fRec99[0]) + ((fSlow4 * fRec95[0]) + ((fSlow75 * fRec91[0]) + ((fSlow71 * fRec87[0]) + ((fSlow68 * fRec83[0]) + ((fSlow65 * fRec77[0]) + ((fSlow62 * fRec71[0]) + ((fSlow59 * fRec65[0]) + ((fSlow56 * fRec60[0]) + ((fSlow53 * fRec54[0]) + ((fSlow50 * fRec47[0]) + ((fSlow47 * fRec40[0]) + ((fSlow44 * fRec33[0]) + ((fSlow3 * fRec26[0]) + ((fSlow74 * fRec19[0]) + ((fSlow24 * fRec5[0]) + ((fSlow23 * fRec12[0]) + ((fSlow22 * fRec111[0]) + ((fSlow21 * fRec116[0]) + ((fSlow20 * fRec121[0]) + ((fSlow19 * fRec126[0]) + ((fSlow18 * fRec131[0]) + ((fSlow17 * fRec136[0]) + ((fSlow16 * fRec141[0]) + ((fSlow15 * fRec146[0]) + ((fSlow14 * fRec151[0]) + ((fSlow13 * fRec156[0]) + ((fSlow12 * fRec161[0]) + ((fSlow11 * fRec166[0]) + ((fSlow10 * fRec171[0]) + ((fSlow9 * fRec176[0]) + ((fSlow8 * fRec181[0]) + ((fSlow7 * fRec191[0]) + (fSlow6 * fRec186[0]))))))))))))))))))))))))))))))))))))))))))));
			iRec233[0] = ((int(((fTemp221 - fTemp220) < 0)))?(1 - iRec233[1]):iRec233[1]);
			float fTemp303 = (iRec233[0] + fTemp221);
			fVec36[0] = fTemp303;
			float fTemp304 = (0.5f * fVec36[0]);
			float fTemp305 = (0.5f * fVec36[1]);
			iRec234[0] = ((int(((fTemp304 - fTemp305) < 0)))?(1 - iRec234[1]):iRec234[1]);
			float fTemp306 = (iRec234[0] + fTemp304);
			fVec37[0] = fTemp306;
			float fTemp307 = (0.5f * fVec37[0]);
			float fTemp308 = (0.5f * fVec37[1]);
			iRec235[0] = ((int(((fTemp307 - fTemp308) < 0)))?(1 - iRec235[1]):iRec235[1]);
			float fTemp309 = (iRec235[0] + fTemp307);
			fVec38[0] = fTemp309;
			float fTemp310 = (0.5f * fVec38[1]);
			float fTemp311 = (0.5f * fVec38[0]);
			float fTemp312 = (1 + fTemp311);
			float fTemp313 = (fTemp312 - (fTemp310 + floorf((fTemp312 - fTemp310))));
			float fTemp314 = (0.5f * (1.0f + fVec38[0]));
			int iTemp315 = ((int((fTemp310 > fTemp311)))?1:((int(((fTemp314 - floorf(fTemp314)) < fTemp313)))?2:0));
			fRec231[0] = square_blep_x(iTemp315, ((int((fTemp311 < 0.5f)))?1.0f:-1.0f), fTemp311, fTemp313);
			float 	fRec232 = square_blep_prev(iTemp315, fRec231[1], fTemp310, fTemp313);
			fRec230[0] = (fRec230[1] + (fConst13 * (fRec232 - fRec230[1])));
			fRec229[0] = (fConst14 * ((fRec230[0] - fRec230[1]) + fRec229[1]));
			iRec240[0] = ((int(((fTemp228 - fTemp227) < 0)))?(1 - iRec240[1]):iRec240[1]);
			float fTemp316 = (iRec240[0] + fTemp228);
			fVec39[0] = fTemp316;
			float fTemp317 = (0.5f * fVec39[0]);
			float fTemp318 = (0.5f * fVec39[1]);
			iRec241[0] = ((int(((fTemp317 - fTemp318) < 0)))?(1 - iRec241[1]):iRec241[1]);
			float fTemp319 = (iRec241[0] + fTemp317);
			fVec40[0] = fTemp319;
			float fTemp320 = (0.5f * fVec40[0]);
			float fTemp321 = (0.5f * fVec40[1]);
			iRec242[0] = ((int(((fTemp320 - fTemp321) < 0)))?(1 - iRec242[1]):iRec242[1]);
			float fTemp322 = (iRec242[0] + fTemp320);
			fVec41[0] = fTemp322;
			float fTemp323 = (0.5f * fVec41[1]);
			float fTemp324 = (0.5f * fVec41[0]);
			float fTemp325 = (1 + fTemp324);
			float fTemp326 = (fTemp325 - (fTemp323 + floorf((fTemp325 - fTemp323))));
			float fTemp327 = (0.5f * (1.0f + fVec41[0]));
			int iTemp328 = ((int((fTemp323 > fTemp324)))?1:((int(((fTemp327 - floorf(fTemp327)) < fTemp326)))?2:0));
			fRec238[0] = square_blep_x(iTemp328, ((int((fTemp324 < 0.5f)))?1.0f:-1.0f), fTemp324, fTemp326);
			float 	fRec239 = square_blep_prev(iTemp328, fRec238[1], fTemp323, fTemp326);
			fRec237[0] = (fRec237[1] + (fConst13 * (fRec239 - fRec237[1])));
			fRec236[0] = (fConst14 * ((fRec237[0] - fRec237[1]) + fRec236[1]));
			iRec247[0] = ((int(((fTemp214 - fTemp213) < 0)))?(1 - iRec247[1]):iRec247[1]);
			float fTemp329 = (iRec247[0] + fTemp214);
			fVec42[0] = fTemp329;
			float fTemp330 = (0.5f * fVec42[0]);
			float fTemp331 = (0.5f * fVec42[1]);
			iRec248[0] = ((int(((fTemp330 - fTemp331) < 0)))?(1 - iRec248[1]):iRec248[1]);
			float fTemp332 = (iRec248[0] + fTemp330);
			fVec43[0] = fTemp332;
			float fTemp333 = (0.5f * fVec43[0]);
			float fTemp334 = (0.5f * fVec43[1]);
			iRec249[0] = ((int(((fTemp333 - fTemp334) < 0)))?(1 - iRec249[1]):iRec249[1]);
			float fTemp335 = (iRec249[0] + fTemp333);
			fVec44[0] = fTemp335;
			float fTemp336 = (0.5f * fVec44[1]);
			float fTemp337 = (0.5f * fVec44[0]);
			float fTemp338 = (1 + fTemp337);
			float fTemp339 = (fTemp338 - (fTemp336 + floorf((fTemp338 - fTemp336))));
			float fTemp340 = (0.5f * (1.0f + fVec44[0]));
			int iTemp341 = ((int((fTemp336 > fTemp337)))?1:((int(((fTemp340 - floorf(fTemp340)) < fTemp339)))?2:0));
			fRec245[0] = square_blep_x(iTemp341, ((int((fTemp337 < 0.5f)))?1.0f:-1.0f), fTemp337, fTemp339);
			float 	fRec246 = square_blep_prev(iTemp341, fRec245[1], fTemp336, fTemp339);
			fRec244[0] = (fRec244[1] + (fConst13 * (fRec246 - fRec244[1])));
			fRec243[0] = (fConst14 * ((fRec244[0] - fRec244[1]) + fRec243[1]));
			iRec254[0] = ((int(((fTemp207 - fTemp206) < 0)))?(1 - iRec254[1]):iRec254[1]);
			float fTemp342 = (iRec254[0] + fTemp207);
			fVec45[0] = fTemp342;
			float fTemp343 = (0.5f * fVec45[0]);
			float fTemp344 = (0.5f * fVec45[1]);
			iRec255[0] = ((int(((fTemp343 - fTemp344) < 0)))?(1 - iRec255[1]):iRec255[1]);
			float fTemp345 = (iRec255[0] + fTemp343);
			fVec46[0] = fTemp345;
			float fTemp346 = (0.5f * fVec46[0]);
			float fTemp347 = (0.5f * fVec46[1]);
			iRec256[0] = ((int(((fTemp346 - fTemp347) < 0)))?(1 - iRec256[1]):iRec256[1]);
			float fTemp348 = (iRec256[0] + fTemp346);
			fVec47[0] = fTemp348;
			float fTemp349 = (0.5f * fVec47[1]);
			float fTemp350 = (0.5f * fVec47[0]);
			float fTemp351 = (1 + fTemp350);
			float fTemp352 = (fTemp351 - (fTemp349 + floorf((fTemp351 - fTemp349))));
			float fTemp353 = (0.5f * (1.0f + fVec47[0]));
			int iTemp354 = ((int((fTemp349 > fTemp350)))?1:((int(((fTemp353 - floorf(fTemp353)) < fTemp352)))?2:0));
			fRec252[0] = square_blep_x(iTemp354, ((int((fTemp350 < 0.5f)))?1.0f:-1.0f), fTemp350, fTemp352);
			float 	fRec253 = square_blep_prev(iTemp354, fRec252[1], fTemp349, fTemp352);
			fRec251[0] = (fRec251[1] + (fConst15 * (fRec253 - fRec251[1])));
			fRec250[0] = (fConst14 * ((fRec251[0] - fRec251[1]) + fRec250[1]));
			iRec261[0] = ((int(((fTemp200 - fTemp199) < 0)))?(1 - iRec261[1]):iRec261[1]);
			float fTemp355 = (iRec261[0] + fTemp200);
			fVec48[0] = fTemp355;
			float fTemp356 = (0.5f * fVec48[0]);
			float fTemp357 = (0.5f * fVec48[1]);
			iRec262[0] = ((int(((fTemp356 - fTemp357) < 0)))?(1 - iRec262[1]):iRec262[1]);
			float fTemp358 = (iRec262[0] + fTemp356);
			fVec49[0] = fTemp358;
			float fTemp359 = (0.5f * fVec49[0]);
			float fTemp360 = (0.5f * fVec49[1]);
			iRec263[0] = ((int(((fTemp359 - fTemp360) < 0)))?(1 - iRec263[1]):iRec263[1]);
			float fTemp361 = (iRec263[0] + fTemp359);
			fVec50[0] = fTemp361;
			float fTemp362 = (0.5f * fVec50[1]);
			float fTemp363 = (0.5f * fVec50[0]);
			float fTemp364 = (1 + fTemp363);
			float fTemp365 = (fTemp364 - (fTemp362 + floorf((fTemp364 - fTemp362))));
			float fTemp366 = (0.5f * (1.0f + fVec50[0]));
			int iTemp367 = ((int((fTemp362 > fTemp363)))?1:((int(((fTemp366 - floorf(fTemp366)) < fTemp365)))?2:0));
			fRec259[0] = square_blep_x(iTemp367, ((int((fTemp363 < 0.5f)))?1.0f:-1.0f), fTemp363, fTemp365);
			float 	fRec260 = square_blep_prev(iTemp367, fRec259[1], fTemp362, fTemp365);
			fRec258[0] = (fRec258[1] + (fConst15 * (fRec260 - fRec258[1])));
			fRec257[0] = (fConst14 * ((fRec258[0] - fRec258[1]) + fRec257[1]));
			iRec268[0] = ((int(((fTemp193 - fTemp192) < 0)))?(1 - iRec268[1]):iRec268[1]);
			float fTemp368 = (iRec268[0] + fTemp193);
			fVec51[0] = fTemp368;
			float fTemp369 = (0.5f * fVec51[0]);
			float fTemp370 = (0.5f * fVec51[1]);
			iRec269[0] = ((int(((fTemp369 - fTemp370) < 0)))?(1 - iRec269[1]):iRec269[1]);
			float fTemp371 = (iRec269[0] + fTemp369);
			fVec52[0] = fTemp371;
			float fTemp372 = (0.5f * fVec52[0]);
			float fTemp373 = (0.5f * fVec52[1]);
			iRec270[0] = ((int(((fTemp372 - fTemp373) < 0)))?(1 - iRec270[1]):iRec270[1]);
			float fTemp374 = (iRec270[0] + fTemp372);
			fVec53[0] = fTemp374;
			float fTemp375 = (0.5f * fVec53[1]);
			float fTemp376 = (0.5f * fVec53[0]);
			float fTemp377 = (1 + fTemp376);
			float fTemp378 = (fTemp377 - (fTemp375 + floorf((fTemp377 - fTemp375))));
			float fTemp379 = (0.5f * (1.0f + fVec53[0]));
			int iTemp380 = ((int((fTemp375 > fTemp376)))?1:((int(((fTemp379 - floorf(fTemp379)) < fTemp378)))?2:0));
			fRec266[0] = square_blep_x(iTemp380, ((int((fTemp376 < 0.5f)))?1.0f:-1.0f), fTemp376, fTemp378);
			float 	fRec267 = square_blep_prev(iTemp380, fRec266[1], fTemp375, fTemp378);
			fRec265[0] = (fRec265[1] + (fConst15 * (fRec267 - fRec265[1])));
			fRec264[0] = (fConst14 * ((fRec265[0] - fRec265[1]) + fRec264[1]));
			iRec275[0] = ((int(((fTemp186 - fTemp185) < 0)))?(1 - iRec275[1]):iRec275[1]);
			float fTemp381 = (iRec275[0] + fTemp186);
			fVec54[0] = fTemp381;
			float fTemp382 = (0.5f * fVec54[0]);
			float fTemp383 = (0.5f * fVec54[1]);
			iRec276[0] = ((int(((fTemp382 - fTemp383) < 0)))?(1 - iRec276[1]):iRec276[1]);
			float fTemp384 = (iRec276[0] + fTemp382);
			fVec55[0] = fTemp384;
			float fTemp385 = (0.5f * fVec55[0]);
			float fTemp386 = (0.5f * fVec55[1]);
			iRec277[0] = ((int(((fTemp385 - fTemp386) < 0)))?(1 - iRec277[1]):iRec277[1]);
			float fTemp387 = (iRec277[0] + fTemp385);
			fVec56[0] = fTemp387;
			float fTemp388 = (0.5f * fVec56[1]);
			float fTemp389 = (0.5f * fVec56[0]);
			float fTemp390 = (1 + fTemp389);
			float fTemp391 = (fTemp390 - (fTemp388 + floorf((fTemp390 - fTemp388))));
			float fTemp392 = (0.5f * (1.0f + fVec56[0]));
			int iTemp393 = ((int((fTemp388 > fTemp389)))?1:((int(((fTemp392 - floorf(fTemp392)) < fTemp391)))?2:0));
			fRec273[0] = square_blep_x(iTemp393, ((int((fTemp389 < 0.5f)))?1.0f:-1.0f), fTemp389, fTemp391);
			float 	fRec274 = square_blep_prev(iTemp393, fRec273[1], fTemp388, fTemp391);
			fRec272[0] = (fRec272[1] + (fConst15 * (fRec274 - fRec272[1])));
			fRec271[0] = (fConst14 * ((fRec272[0] - fRec272[1]) + fRec271[1]));
			iRec282[0] = ((int(((fTemp263 - fTemp262) < 0)))?(1 - iRec282[1]):iRec282[1]);
			float fTemp394 = (iRec282[0] + fTemp263);
			fVec57[0] = fTemp394;
			float fTemp395 = (0.5f * fVec57[0]);
			float fTemp396 = (0.5f * fVec57[1]);
			iRec283[0] = ((int(((fTemp395 - fTemp396) < 0)))?(1 - iRec283[1]):iRec283[1]);
			float fTemp397 = (iRec283[0] + fTemp395);
			fVec58[0] = fTemp397;
			float fTemp398 = (0.5f * fVec58[1]);
			float fTemp399 = (0.5f * fVec58[0]);
			float fTemp400 = (1 + fTemp399);
			float fTemp401 = (fTemp400 - (fTemp398 + floorf((fTemp400 - fTemp398))));
			float fTemp402 = (0.5f * (1.0f + fVec58[0]));
			int iTemp403 = ((int((fTemp398 > fTemp399)))?1:((int(((fTemp402 - floorf(fTemp402)) < fTemp401)))?2:0));
			fRec280[0] = square_blep_x(iTemp403, ((int((fTemp399 < 0.5f)))?1.0f:-1.0f), fTemp399, fTemp401);
			float 	fRec281 = square_blep_prev(iTemp403, fRec280[1], fTemp398, fTemp401);
			fRec279[0] = (fRec279[1] + (fConst15 * (fRec281 - fRec279[1])));
			fRec278[0] = (fConst16 * ((fRec279[0] - fRec279[1]) + fRec278[1]));
			iRec288[0] = ((int(((fTemp256 - fTemp255) < 0)))?(1 - iRec288[1]):iRec288[1]);
			float fTemp404 = (iRec288[0] + fTemp256);
			fVec59[0] = fTemp404;
			float fTemp405 = (0.5f * fVec59[0]);
			float fTemp406 = (0.5f * fVec59[1]);
			iRec289[0] = ((int(((fTemp405 - fTemp406) < 0)))?(1 - iRec289[1]):iRec289[1]);
			float fTemp407 = (iRec289[0] + fTemp405);
			fVec60[0] = fTemp407;
			float fTemp408 = (0.5f * fVec60[1]);
			float fTemp409 = (0.5f * fVec60[0]);
			float fTemp410 = (1 + fTemp409);
			float fTemp411 = (fTemp410 - (fTemp408 + floorf((fTemp410 - fTemp408))));
			float fTemp412 = (0.5f * (1.0f + fVec60[0]));
			int iTemp413 = ((int((fTemp408 > fTemp409)))?1:((int(((fTemp412 - floorf(fTemp412)) < fTemp411)))?2:0));
			fRec286[0] = square_blep_x(iTemp413, ((int((fTemp409 < 0.5f)))?1.0f:-1.0f), fTemp409, fTemp411);
			float 	fRec287 = square_blep_prev(iTemp413, fRec286[1], fTemp408, fTemp411);
			fRec285[0] = (fRec285[1] + (fConst15 * (fRec287 - fRec285[1])));
			fRec284[0] = (fConst16 * ((fRec285[0] - fRec285[1]) + fRec284[1]));
			iRec294[0] = ((int(((fTemp249 - fTemp248) < 0)))?(1 - iRec294[1]):iRec294[1]);
			float fTemp414 = (iRec294[0] + fTemp249);
			fVec61[0] = fTemp414;
			float fTemp415 = (0.5f * fVec61[0]);
			float fTemp416 = (0.5f * fVec61[1]);
			iRec295[0] = ((int(((fTemp415 - fTemp416) < 0)))?(1 - iRec295[1]):iRec295[1]);
			float fTemp417 = (iRec295[0] + fTemp415);
			fVec62[0] = fTemp417;
			float fTemp418 = (0.5f * fVec62[1]);
			float fTemp419 = (0.5f * fVec62[0]);
			float fTemp420 = (1 + fTemp419);
			float fTemp421 = (fTemp420 - (fTemp418 + floorf((fTemp420 - fTemp418))));
			float fTemp422 = (0.5f * (1.0f + fVec62[0]));
			int iTemp423 = ((int((fTemp418 > fTemp419)))?1:((int(((fTemp422 - floorf(fTemp422)) < fTemp421)))?2:0));
			fRec292[0] = square_blep_x(iTemp423, ((int((fTemp419 < 0.5f)))?1.0f:-1.0f), fTemp419, fTemp421);
			float 	fRec293 = square_blep_prev(iTemp423, fRec292[1], fTemp418, fTemp421);
			fRec291[0] = (fRec291[1] + (fConst15 * (fRec293 - fRec291[1])));
			fRec290[0] = (fConst16 * ((fRec291[0] - fRec291[1]) + fRec290[1]));
			iRec300[0] = ((int(((fTemp242 - fTemp241) < 0)))?(1 - iRec300[1]):iRec300[1]);
			float fTemp424 = (iRec300[0] + fTemp242);
			fVec63[0] = fTemp424;
			float fTemp425 = (0.5f * fVec63[0]);
			float fTemp426 = (0.5f * fVec63[1]);
			iRec301[0] = ((int(((fTemp425 - fTemp426) < 0)))?(1 - iRec301[1]):iRec301[1]);
			float fTemp427 = (iRec301[0] + fTemp425);
			fVec64[0] = fTemp427;
			float fTemp428 = (0.5f * fVec64[1]);
			float fTemp429 = (0.5f * fVec64[0]);
			float fTemp430 = (1 + fTemp429);
			float fTemp431 = (fTemp430 - (fTemp428 + floorf((fTemp430 - fTemp428))));
			float fTemp432 = (0.5f * (1.0f + fVec64[0]));
			int iTemp433 = ((int((fTemp428 > fTemp429)))?1:((int(((fTemp432 - floorf(fTemp432)) < fTemp431)))?2:0));
			fRec298[0] = square_blep_x(iTemp433, ((int((fTemp429 < 0.5f)))?1.0f:-1.0f), fTemp429, fTemp431);
			float 	fRec299 = square_blep_prev(iTemp433, fRec298[1], fTemp428, fTemp431);
			fRec297[0] = (fRec297[1] + (fConst15 * (fRec299 - fRec297[1])));
			fRec296[0] = (fConst16 * ((fRec297[0] - fRec297[1]) + fRec296[1]));
			iRec306[0] = ((int(((fTemp235 - fTemp234) < 0)))?(1 - iRec306[1]):iRec306[1]);
			float fTemp434 = (iRec306[0] + fTemp235);
			fVec65[0] = fTemp434;
			float fTemp435 = (0.5f * fVec65[0]);
			float fTemp436 = (0.5f * fVec65[1]);
			iRec307[0] = ((int(((fTemp435 - fTemp436) < 0)))?(1 - iRec307[1]):iRec307[1]);
			float fTemp437 = (iRec307[0] + fTemp435);
			fVec66[0] = fTemp437;
			float fTemp438 = (0.5f * fVec66[1]);
			float fTemp439 = (0.5f * fVec66[0]);
			float fTemp440 = (1 + fTemp439);
			float fTemp441 = (fTemp440 - (fTemp438 + floorf((fTemp440 - fTemp438))));
			float fTemp442 = (0.5f * (1.0f + fVec66[0]));
			int iTemp443 = ((int((fTemp438 > fTemp439)))?1:((int(((fTemp442 - floorf(fTemp442)) < fTemp441)))?2:0));
			fRec304[0] = square_blep_x(iTemp443, ((int((fTemp439 < 0.5f)))?1.0f:-1.0f), fTemp439, fTemp441);
			float 	fRec305 = square_blep_prev(iTemp443, fRec304[1], fTemp438, fTemp441);
			fRec303[0] = (fRec303[1] + (fConst17 * (fRec305 - fRec303[1])));
			fRec302[0] = (fConst16 * ((fRec303[0] - fRec303[1]) + fRec302[1]));
			float fTemp444 = (1 + fTemp320);
			float fTemp445 = (fTemp444 - (fTemp321 + floorf((fTemp444 - fTemp321))));
			float fTemp446 = (0.5f * (1.0f + fVec40[0]));
			int iTemp447 = ((int((fTemp321 > fTemp320)))?1:((int(((fTemp446 - floorf(fTemp446)) < fTemp445)))?2:0));
			fRec310[0] = square_blep_x(iTemp447, ((int((fTemp320 < 0.5f)))?1.0f:-1.0f), fTemp320, fTemp445);
			float 	fRec311 = square_blep_prev(iTemp447, fRec310[1], fTemp321, fTemp445);
			fRec309[0] = (fRec309[1] + (fConst17 * (fRec311 - fRec309[1])));
			fRec308[0] = (fConst16 * ((fRec309[0] - fRec309[1]) + fRec308[1]));
			float fTemp448 = (1 + fTemp307);
			float fTemp449 = (fTemp448 - (fTemp308 + floorf((fTemp448 - fTemp308))));
			float fTemp450 = (0.5f * (1.0f + fVec37[0]));
			int iTemp451 = ((int((fTemp308 > fTemp307)))?1:((int(((fTemp450 - floorf(fTemp450)) < fTemp449)))?2:0));
			fRec314[0] = square_blep_x(iTemp451, ((int((fTemp307 < 0.5f)))?1.0f:-1.0f), fTemp307, fTemp449);
			float 	fRec315 = square_blep_prev(iTemp451, fRec314[1], fTemp308, fTemp449);
			fRec313[0] = (fRec313[1] + (fConst17 * (fRec315 - fRec313[1])));
			fRec312[0] = (fConst16 * ((fRec313[0] - fRec313[1]) + fRec312[1]));
			float fTemp452 = (1 + fTemp333);
			float fTemp453 = (fTemp452 - (fTemp334 + floorf((fTemp452 - fTemp334))));
			float fTemp454 = (0.5f * (1.0f + fVec43[0]));
			int iTemp455 = ((int((fTemp334 > fTemp333)))?1:((int(((fTemp454 - floorf(fTemp454)) < fTemp453)))?2:0));
			fRec318[0] = square_blep_x(iTemp455, ((int((fTemp333 < 0.5f)))?1.0f:-1.0f), fTemp333, fTemp453);
			float 	fRec319 = square_blep_prev(iTemp455, fRec318[1], fTemp334, fTemp453);
			fRec317[0] = (fRec317[1] + (fConst17 * (fRec319 - fRec317[1])));
			fRec316[0] = (fConst16 * ((fRec317[0] - fRec317[1]) + fRec316[1]));
			float fTemp456 = (1 + fTemp346);
			float fTemp457 = (fTemp456 - (fTemp347 + floorf((fTemp456 - fTemp347))));
			float fTemp458 = (0.5f * (1.0f + fVec46[0]));
			int iTemp459 = ((int((fTemp347 > fTemp346)))?1:((int(((fTemp458 - floorf(fTemp458)) < fTemp457)))?2:0));
			fRec322[0] = square_blep_x(iTemp459, ((int((fTemp346 < 0.5f)))?1.0f:-1.0f), fTemp346, fTemp457);
			float 	fRec323 = square_blep_prev(iTemp459, fRec322[1], fTemp347, fTemp457);
			fRec321[0] = (fRec321[1] + (fConst18 * (fRec323 - fRec321[1])));
			fRec320[0] = (fConst16 * ((fRec321[0] - fRec321[1]) + fRec320[1]));
			float fTemp460 = (1 + fTemp359);
			float fTemp461 = (fTemp460 - (fTemp360 + floorf((fTemp460 - fTemp360))));
			float fTemp462 = (0.5f * (1.0f + fVec49[0]));
			int iTemp463 = ((int((fTemp360 > fTemp359)))?1:((int(((fTemp462 - floorf(fTemp462)) < fTemp461)))?2:0));
			fRec326[0] = square_blep_x(iTemp463, ((int((fTemp359 < 0.5f)))?1.0f:-1.0f), fTemp359, fTemp461);
			float 	fRec327 = square_blep_prev(iTemp463, fRec326[1], fTemp360, fTemp461);
			fRec325[0] = (fRec325[1] + (fConst18 * (fRec327 - fRec325[1])));
			fRec324[0] = (fConst16 * ((fRec325[0] - fRec325[1]) + fRec324[1]));
			float fTemp464 = (1 + fTemp372);
			float fTemp465 = (fTemp464 - (fTemp373 + floorf((fTemp464 - fTemp373))));
			float fTemp466 = (0.5f * (1.0f + fVec52[0]));
			int iTemp467 = ((int((fTemp373 > fTemp372)))?1:((int(((fTemp466 - floorf(fTemp466)) < fTemp465)))?2:0));
			fRec330[0] = square_blep_x(iTemp467, ((int((fTemp372 < 0.5f)))?1.0f:-1.0f), fTemp372, fTemp465);
			float 	fRec331 = square_blep_prev(iTemp467, fRec330[1], fTemp373, fTemp465);
			fRec329[0] = (fRec329[1] + (fConst18 * (fRec331 - fRec329[1])));
			fRec328[0] = (fConst16 * ((fRec329[0] - fRec329[1]) + fRec328[1]));
			float fTemp468 = (1 + fTemp385);
			float fTemp469 = (fTemp468 - (fTemp386 + floorf((fTemp468 - fTemp386))));
			float fTemp470 = (0.5f * (1.0f + fVec55[0]));
			int iTemp471 = ((int((fTemp386 > fTemp385)))?1:((int(((fTemp470 - floorf(fTemp470)) < fTemp469)))?2:0));
			fRec334[0] = square_blep_x(iTemp471, ((int((fTemp385 < 0.5f)))?1.0f:-1.0f), fTemp385, fTemp469);
			float 	fRec335 = square_blep_prev(iTemp471, fRec334[1], fTemp386, fTemp469);
			fRec333[0] = (fRec333[1] + (fConst18 * (fRec335 - fRec333[1])));
			fRec332[0] = (fConst16 * ((fRec333[0] - fRec333[1]) + fRec332[1]));
			float fTemp472 = (1 + fTemp395);
			float fTemp473 = (fTemp472 - (fTemp396 + floorf((fTemp472 - fTemp396))));
			float fTemp474 = (0.5f * (1.0f + fVec57[0]));
			int iTemp475 = ((int((fTemp396 > fTemp395)))?1:((int(((fTemp474 - floorf(fTemp474)) < fTemp473)))?2:0));
			fRec338[0] = square_blep_x(iTemp475, ((int((fTemp395 < 0.5f)))?1.0f:-1.0f), fTemp395, fTemp473);
			float 	fRec339 = square_blep_prev(iTemp475, fRec338[1], fTemp396, fTemp473);
			fRec337[0] = (fRec337[1] + (fConst19 * (fRec339 - fRec337[1])));
			fRec336[0] = (fConst3 * ((fRec337[0] - fRec337[1]) + fRec336[1]));
			float fTemp476 = (1 + fTemp405);
			float fTemp477 = (fTemp476 - (fTemp406 + floorf((fTemp476 - fTemp406))));
			float fTemp478 = (0.5f * (1.0f + fVec59[0]));
			int iTemp479 = ((int((fTemp406 > fTemp405)))?1:((int(((fTemp478 - floorf(fTemp478)) < fTemp477)))?2:0));
			fRec342[0] = square_blep_x(iTemp479, ((int((fTemp405 < 0.5f)))?1.0f:-1.0f), fTemp405, fTemp477);
			float 	fRec343 = square_blep_prev(iTemp479, fRec342[1], fTemp406, fTemp477);
			fRec341[0] = (fRec341[1] + (fConst19 * (fRec343 - fRec341[1])));
			fRec340[0] = (fConst3 * ((fRec341[0] - fRec341[1]) + fRec340[1]));
			float fTemp480 = (1 + fTemp415);
			float fTemp481 = (fTemp480 - (fTemp416 + floorf((fTemp480 - fTemp416))));
			float fTemp482 = (0.5f * (1.0f + fVec61[0]));
			int iTemp483 = ((int((fTemp416 > fTemp415)))?1:((int(((fTemp482 - floorf(fTemp482)) < fTemp481)))?2:0));
			fRec346[0] = square_blep_x(iTemp483, ((int((fTemp415 < 0.5f)))?1.0f:-1.0f), fTemp415, fTemp481);
			float 	fRec347 = square_blep_prev(iTemp483, fRec346[1], fTemp416, fTemp481);
			fRec345[0] = (fRec345[1] + (fConst19 * (fRec347 - fRec345[1])));
			fRec344[0] = (fConst3 * ((fRec345[0] - fRec345[1]) + fRec344[1]));
			float fTemp484 = (1 + fTemp425);
			float fTemp485 = (fTemp484 - (fTemp426 + floorf((fTemp484 - fTemp426))));
			float fTemp486 = (0.5f * (1.0f + fVec63[0]));
			int iTemp487 = ((int((fTemp426 > fTemp425)))?1:((int(((fTemp486 - floorf(fTemp486)) < fTemp485)))?2:0));
			fRec350[0] = square_blep_x(iTemp487, ((int((fTemp425 < 0.5f)))?1.0f:-1.0f), fTemp425, fTemp485);
			float 	fRec351 = square_blep_prev(iTemp487, fRec350[1], fTemp426, fTemp485);
			fRec349[0] = (fRec349[1] + (fConst19 * (fRec351 - fRec349[1])));
			fRec348[0] = (fConst3 * ((fRec349[0] - fRec349[1]) + fRec348[1]));
			float fTemp488 = (1 + fTemp435);
			float fTemp489 = (fTemp488 - (fTemp436 + floorf((fTemp488 - fTemp436))));
			float fTemp490 = (0.5f * (1.0f + fVec65[0]));
			int iTemp491 = ((int((fTemp436 > fTemp435)))?1:((int(((fTemp490 - floorf(fTemp490)) < fTemp489)))?2:0));
			fRec354[0] = square_blep_x(iTemp491, ((int((fTemp435 < 0.5f)))?1.0f:-1.0f), fTemp435, fTemp489);
			float 	fRec355 = square_blep_prev(iTemp491, fRec354[1], fTemp436, fTemp489);
			fRec353[0] = (fRec353[1] + (fConst20 * (fRec355 - fRec353[1])));
			fRec352[0] = (fConst3 * ((fRec353[0] - fRec353[1]) + fRec352[1]));
			float fTemp492 = (1 + fTemp317);
			float fTemp493 = (fTemp492 - (fTemp318 + floorf((fTemp492 - fTemp318))));
			float fTemp494 = (0.5f * (1.0f + fVec39[0]));
			int iTemp495 = ((int((fTemp318 > fTemp317)))?1:((int(((fTemp494 - floorf(fTemp494)) < fTemp493)))?2:0));
			fRec358[0] = square_blep_x(iTemp495, ((int((fTemp317 < 0.5f)))?1.0f:-1.0f), fTemp317, fTemp493);
			float 	fRec359 = square_blep_prev(iTemp495, fRec358[1], fTemp318, fTemp493);
			fRec357[0] = (fRec357[1] + (fConst20 * (fRec359 - fRec357[1])));
			fRec356[0] = (fConst3 * ((fRec357[0] - fRec357[1]) + fRec356[1]));
			float fTemp496 = (1 + fTemp304);
			float fTemp497 = (fTemp496 - (fTemp305 + floorf((fTemp496 - fTemp305))));
			float fTemp498 = (0.5f * (1.0f + fVec36[0]));
			int iTemp499 = ((int((fTemp305 > fTemp304)))?1:((int(((fTemp498 - floorf(fTemp498)) < fTemp497)))?2:0));
			fRec362[0] = square_blep_x(iTemp499, ((int((fTemp304 < 0.5f)))?1.0f:-1.0f), fTemp304, fTemp497);
			float 	fRec363 = square_blep_prev(iTemp499, fRec362[1], fTemp305, fTemp497);
			fRec361[0] = (fRec361[1] + (fConst20 * (fRec363 - fRec361[1])));
			fRec360[0] = (fConst3 * ((fRec361[0] - fRec361[1]) + fRec360[1]));
			float fTemp500 = (1 + fTemp330);
			float fTemp501 = (fTemp500 - (fTemp331 + floorf((fTemp500 - fTemp331))));
			float fTemp502 = (0.5f * (1.0f + fVec42[0]));
			int iTemp503 = ((int((fTemp331 > fTemp330)))?1:((int(((fTemp502 - floorf(fTemp502)) < fTemp501)))?2:0));
			fRec366[0] = square_blep_x(iTemp503, ((int((fTemp330 < 0.5f)))?1.0f:-1.0f), fTemp330, fTemp501);
			float 	fRec367 = square_blep_prev(iTemp503, fRec366[1], fTemp331, fTemp501);
			fRec365[0] = (fRec365[1] + (fConst20 * (fRec367 - fRec365[1])));
			fRec364[0] = (fConst3 * ((fRec365[0] - fRec365[1]) + fRec364[1]));
			float fTemp504 = (1 + fTemp343);
			float fTemp505 = (fTemp504 - (fTemp344 + floorf((fTemp504 - fTemp344))));
			float fTemp506 = (0.5f * (1.0f + fVec45[0]));
			int iTemp507 = ((int((fTemp344 > fTemp343)))?1:((int(((fTemp506 - floorf(fTemp506)) < fTemp505)))?2:0));
			fRec370[0] = square_blep_x(iTemp507, ((int((fTemp343 < 0.5f)))?1.0f:-1.0f), fTemp343, fTemp505);
			float 	fRec371 = square_blep_prev(iTemp507, fRec370[1], fTemp344, fTemp505);
			fRec369[0] = (fRec369[1] + (fConst21 * (fRec371 - fRec369[1])));
			fRec368[0] = (fConst3 * ((fRec369[0] - fRec369[1]) + fRec368[1]));
			float fTemp508 = (1 + fTemp356);
			float fTemp509 = (fTemp508 - (fTemp357 + floorf((fTemp508 - fTemp357))));
			float fTemp510 = (0.5f * (1.0f + fVec48[0]));
			int iTemp511 = ((int((fTemp357 > fTemp356)))?1:((int(((fTemp510 - floorf(fTemp510)) < fTemp509)))?2:0));
			fRec374[0] = square_blep_x(iTemp511, ((int((fTemp356 < 0.5f)))?1.0f:-1.0f), fTemp356, fTemp509);
			float 	fRec375 = square_blep_prev(iTemp511, fRec374[1], fTemp357, fTemp509);
			fRec373[0] = (fRec373[1] + (fConst21 * (fRec375 - fRec373[1])));
			fRec372[0] = (fConst3 * ((fRec373[0] - fRec373[1]) + fRec372[1]));
			float fTemp512 = (1 + fTemp369);
			float fTemp513 = (fTemp512 - (fTemp370 + floorf((fTemp512 - fTemp370))));
			float fTemp514 = (0.5f * (1.0f + fVec51[0]));
			int iTemp515 = ((int((fTemp370 > fTemp369)))?1:((int(((fTemp514 - floorf(fTemp514)) < fTemp513)))?2:0));
			fRec378[0] = square_blep_x(iTemp515, ((int((fTemp369 < 0.5f)))?1.0f:-1.0f), fTemp369, fTemp513);
			float 	fRec379 = square_blep_prev(iTemp515, fRec378[1], fTemp370, fTemp513);
			fRec377[0] = (fRec377[1] + (fConst21 * (fRec379 - fRec377[1])));
			fRec376[0] = (fConst3 * ((fRec377[0] - fRec377[1]) + fRec376[1]));
			float fTemp516 = (1 + fTemp382);
			float fTemp517 = (fTemp516 - (fTemp383 + floorf((fTemp516 - fTemp383))));
			float fTemp518 = (0.5f * (1.0f + fVec54[0]));
			int iTemp519 = ((int((fTemp383 > fTemp382)))?1:((int(((fTemp518 - floorf(fTemp518)) < fTemp517)))?2:0));
			fRec382[0] = square_blep_x(iTemp519, ((int((fTemp382 < 0.5f)))?1.0f:-1.0f), fTemp382, fTemp517);
			float 	fRec383 = square_blep_prev(iTemp519, fRec382[1], fTemp383, fTemp517);
			fRec381[0] = (fRec381[1] + (fConst21 * (fRec383 - fRec381[1])));
			fRec380[0] = (fConst3 * ((fRec381[0] - fRec381[1]) + fRec380[1]));
			iRec388[0] = ((int(((fTemp439 - fTemp438) < 0)))?(1 - iRec388[1]):iRec388[1]);
			float fTemp520 = (iRec388[0] + fTemp439);
			fVec67[0] = fTemp520;
			float fTemp521 = (0.5f * fVec67[1]);
			float fTemp522 = (0.5f * fVec67[0]);
			float fTemp523 = (1 + fTemp522);
			float fTemp524 = (fTemp523 - (fTemp521 + floorf((fTemp523 - fTemp521))));
			float fTemp525 = (0.5f * (1.0f + fVec67[0]));
			int iTemp526 = ((int((fTemp521 > fTemp522)))?1:((int(((fTemp525 - floorf(fTemp525)) < fTemp524)))?2:0));
			fRec386[0] = square_blep_x(iTemp526, ((int((fTemp522 < 0.5f)))?1.0f:-1.0f), fTemp522, fTemp524);
			float 	fRec387 = square_blep_prev(iTemp526, fRec386[1], fTemp521, fTemp524);
			fRec385[0] = (fRec385[1] + (fConst13 * (fRec387 - fRec385[1])));
			fRec384[0] = (fConst14 * ((fRec385[0] - fRec385[1]) + fRec384[1]));
			iRec393[0] = ((int(((fTemp429 - fTemp428) < 0)))?(1 - iRec393[1]):iRec393[1]);
			float fTemp527 = (iRec393[0] + fTemp429);
			fVec68[0] = fTemp527;
			float fTemp528 = (0.5f * fVec68[1]);
			float fTemp529 = (0.5f * fVec68[0]);
			float fTemp530 = (1 + fTemp529);
			float fTemp531 = (fTemp530 - (fTemp528 + floorf((fTemp530 - fTemp528))));
			float fTemp532 = (0.5f * (1.0f + fVec68[0]));
			int iTemp533 = ((int((fTemp528 > fTemp529)))?1:((int(((fTemp532 - floorf(fTemp532)) < fTemp531)))?2:0));
			fRec391[0] = square_blep_x(iTemp533, ((int((fTemp529 < 0.5f)))?1.0f:-1.0f), fTemp529, fTemp531);
			float 	fRec392 = square_blep_prev(iTemp533, fRec391[1], fTemp528, fTemp531);
			fRec390[0] = (fRec390[1] + (fConst22 * (fRec392 - fRec390[1])));
			fRec389[0] = (fConst14 * ((fRec390[0] - fRec390[1]) + fRec389[1]));
			iRec398[0] = ((int(((fTemp419 - fTemp418) < 0)))?(1 - iRec398[1]):iRec398[1]);
			float fTemp534 = (iRec398[0] + fTemp419);
			fVec69[0] = fTemp534;
			float fTemp535 = (0.5f * fVec69[1]);
			float fTemp536 = (0.5f * fVec69[0]);
			float fTemp537 = (1 + fTemp536);
			float fTemp538 = (fTemp537 - (fTemp535 + floorf((fTemp537 - fTemp535))));
			float fTemp539 = (0.5f * (1.0f + fVec69[0]));
			int iTemp540 = ((int((fTemp535 > fTemp536)))?1:((int(((fTemp539 - floorf(fTemp539)) < fTemp538)))?2:0));
			fRec396[0] = square_blep_x(iTemp540, ((int((fTemp536 < 0.5f)))?1.0f:-1.0f), fTemp536, fTemp538);
			float 	fRec397 = square_blep_prev(iTemp540, fRec396[1], fTemp535, fTemp538);
			fRec395[0] = (fRec395[1] + (fConst22 * (fRec397 - fRec395[1])));
			fRec394[0] = (fConst14 * ((fRec395[0] - fRec395[1]) + fRec394[1]));
			iRec403[0] = ((int(((fTemp409 - fTemp408) < 0)))?(1 - iRec403[1]):iRec403[1]);
			float fTemp541 = (iRec403[0] + fTemp409);
			fVec70[0] = fTemp541;
			float fTemp542 = (0.5f * fVec70[1]);
			float fTemp543 = (0.5f * fVec70[0]);
			float fTemp544 = (1 + fTemp543);
			float fTemp545 = (fTemp544 - (fTemp542 + floorf((fTemp544 - fTemp542))));
			float fTemp546 = (0.5f * (1.0f + fVec70[0]));
			int iTemp547 = ((int((fTemp542 > fTemp543)))?1:((int(((fTemp546 - floorf(fTemp546)) < fTemp545)))?2:0));
			fRec401[0] = square_blep_x(iTemp547, ((int((fTemp543 < 0.5f)))?1.0f:-1.0f), fTemp543, fTemp545);
			float 	fRec402 = square_blep_prev(iTemp547, fRec401[1], fTemp542, fTemp545);
			fRec400[0] = (fRec400[1] + (fConst22 * (fRec402 - fRec400[1])));
			fRec399[0] = (fConst14 * ((fRec400[0] - fRec400[1]) + fRec399[1]));
			iRec408[0] = ((int(((fTemp399 - fTemp398) < 0)))?(1 - iRec408[1]):iRec408[1]);
			float fTemp548 = (iRec408[0] + fTemp399);
			fVec71[0] = fTemp548;
			float fTemp549 = (0.5f * fVec71[1]);
			float fTemp550 = (0.5f * fVec71[0]);
			float fTemp551 = (1 + fTemp550);
			float fTemp552 = (fTemp551 - (fTemp549 + floorf((fTemp551 - fTemp549))));
			float fTemp553 = (0.5f * (1.0f + fVec71[0]));
			int iTemp554 = ((int((fTemp549 > fTemp550)))?1:((int(((fTemp553 - floorf(fTemp553)) < fTemp552)))?2:0));
			fRec406[0] = square_blep_x(iTemp554, ((int((fTemp550 < 0.5f)))?1.0f:-1.0f), fTemp550, fTemp552);
			float 	fRec407 = square_blep_prev(iTemp554, fRec406[1], fTemp549, fTemp552);
			fRec405[0] = (fRec405[1] + (fConst22 * (fRec407 - fRec405[1])));
			fRec404[0] = (fConst14 * ((fRec405[0] - fRec405[1]) + fRec404[1]));
			iRec413[0] = ((int(((fTemp389 - fTemp388) < 0)))?(1 - iRec413[1]):iRec413[1]);
			float fTemp555 = (iRec413[0] + fTemp389);
			fVec72[0] = fTemp555;
			float fTemp556 = (0.5f * fVec72[1]);
			float fTemp557 = (0.5f * fVec72[0]);
			float fTemp558 = (1 + fTemp557);
			float fTemp559 = (fTemp558 - (fTemp556 + floorf((fTemp558 - fTemp556))));
			float fTemp560 = (0.5f * (1.0f + fVec72[0]));
			int iTemp561 = ((int((fTemp556 > fTemp557)))?1:((int(((fTemp560 - floorf(fTemp560)) < fTemp559)))?2:0));
			fRec411[0] = square_blep_x(iTemp561, ((int((fTemp557 < 0.5f)))?1.0f:-1.0f), fTemp557, fTemp559);
			float 	fRec412 = square_blep_prev(iTemp561, fRec411[1], fTemp556, fTemp559);
			fRec410[0] = (fRec410[1] + (fConst22 * (fRec412 - fRec410[1])));
			fRec409[0] = (fConst23 * ((fRec410[0] - fRec410[1]) + fRec409[1]));
			iRec418[0] = ((int(((fTemp376 - fTemp375) < 0)))?(1 - iRec418[1]):iRec418[1]);
			float fTemp562 = (iRec418[0] + fTemp376);
			fVec73[0] = fTemp562;
			float fTemp563 = (0.5f * fVec73[1]);
			float fTemp564 = (0.5f * fVec73[0]);
			float fTemp565 = (1 + fTemp564);
			float fTemp566 = (fTemp565 - (fTemp563 + floorf((fTemp565 - fTemp563))));
			float fTemp567 = (0.5f * (1.0f + fVec73[0]));
			int iTemp568 = ((int((fTemp563 > fTemp564)))?1:((int(((fTemp567 - floorf(fTemp567)) < fTemp566)))?2:0));
			fRec416[0] = square_blep_x(iTemp568, ((int((fTemp564 < 0.5f)))?1.0f:-1.0f), fTemp564, fTemp566);
			float 	fRec417 = square_blep_prev(iTemp568, fRec416[1], fTemp563, fTemp566);
			fRec415[0] = (fRec415[1] + (fConst22 * (fRec417 - fRec415[1])));
			fRec414[0] = (fConst23 * ((fRec415[0] - fRec415[1]) + fRec414[1]));
			iRec423[0] = ((int(((fTemp363 - fTemp362) < 0)))?(1 - iRec423[1]):iRec423[1]);
			float fTemp569 = (iRec423[0] + fTemp363);
			fVec74[0] = fTemp569;
			float fTemp570 = (0.5f * fVec74[1]);
			float fTemp571 = (0.5f * fVec74[0]);
			float fTemp572 = (1 + fTemp571);
			float fTemp573 = (fTemp572 - (fTemp570 + floorf((fTemp572 - fTemp570))));
			float fTemp574 = (0.5f * (1.0f + fVec74[0]));
			int iTemp575 = ((int((fTemp570 > fTemp571)))?1:((int(((fTemp574 - floorf(fTemp574)) < fTemp573)))?2:0));
			fRec421[0] = square_blep_x(iTemp575, ((int((fTemp571 < 0.5f)))?1.0f:-1.0f), fTemp571, fTemp573);
			float 	fRec422 = square_blep_prev(iTemp575, fRec421[1], fTemp570, fTemp573);
			fRec420[0] = (fRec420[1] + (fConst22 * (fRec422 - fRec420[1])));
			fRec419[0] = (fConst23 * ((fRec420[0] - fRec420[1]) + fRec419[1]));
			iRec428[0] = ((int(((fTemp350 - fTemp349) < 0)))?(1 - iRec428[1]):iRec428[1]);
			float fTemp576 = (iRec428[0] + fTemp350);
			fVec75[0] = fTemp576;
			float fTemp577 = (0.5f * fVec75[1]);
			float fTemp578 = (0.5f * fVec75[0]);
			float fTemp579 = (1 + fTemp578);
			float fTemp580 = (fTemp579 - (fTemp577 + floorf((fTemp579 - fTemp577))));
			float fTemp581 = (0.5f * (1.0f + fVec75[0]));
			int iTemp582 = ((int((fTemp577 > fTemp578)))?1:((int(((fTemp581 - floorf(fTemp581)) < fTemp580)))?2:0));
			fRec426[0] = square_blep_x(iTemp582, ((int((fTemp578 < 0.5f)))?1.0f:-1.0f), fTemp578, fTemp580);
			float 	fRec427 = square_blep_prev(iTemp582, fRec426[1], fTemp577, fTemp580);
			fRec425[0] = (fRec425[1] + (fConst22 * (fRec427 - fRec425[1])));
			fRec424[0] = (fConst23 * ((fRec425[0] - fRec425[1]) + fRec424[1]));
			iRec433[0] = ((int(((fTemp337 - fTemp336) < 0)))?(1 - iRec433[1]):iRec433[1]);
			float fTemp583 = (iRec433[0] + fTemp337);
			fVec76[0] = fTemp583;
			float fTemp584 = (0.5f * fVec76[1]);
			float fTemp585 = (0.5f * fVec76[0]);
			float fTemp586 = (1 + fTemp585);
			float fTemp587 = (fTemp586 - (fTemp584 + floorf((fTemp586 - fTemp584))));
			float fTemp588 = (0.5f * (1.0f + fVec76[0]));
			int iTemp589 = ((int((fTemp584 > fTemp585)))?1:((int(((fTemp588 - floorf(fTemp588)) < fTemp587)))?2:0));
			fRec431[0] = square_blep_x(iTemp589, ((int((fTemp585 < 0.5f)))?1.0f:-1.0f), fTemp585, fTemp587);
			float 	fRec432 = square_blep_prev(iTemp589, fRec431[1], fTemp584, fTemp587);
			fRec430[0] = (fRec430[1] + (fConst24 * (fRec432 - fRec430[1])));
			fRec429[0] = (fConst23 * ((fRec430[0] - fRec430[1]) + fRec429[1]));
			iRec438[0] = ((int(((fTemp311 - fTemp310) < 0)))?(1 - iRec438[1]):iRec438[1]);
			float fTemp590 = (iRec438[0] + fTemp311);
			fVec77[0] = fTemp590;
			float fTemp591 = (0.5f * fVec77[1]);
			float fTemp592 = (0.5f * fVec77[0]);
			float fTemp593 = (1 + fTemp592);
			float fTemp594 = (fTemp593 - (fTemp591 + floorf((fTemp593 - fTemp591))));
			float fTemp595 = (0.5f * (1.0f + fVec77[0]));
			int iTemp596 = ((int((fTemp591 > fTemp592)))?1:((int(((fTemp595 - floorf(fTemp595)) < fTemp594)))?2:0));
			fRec436[0] = square_blep_x(iTemp596, ((int((fTemp592 < 0.5f)))?1.0f:-1.0f), fTemp592, fTemp594);
			float 	fRec437 = square_blep_prev(iTemp596, fRec436[1], fTemp591, fTemp594);
			fRec435[0] = (fRec435[1] + (fConst24 * (fRec437 - fRec435[1])));
			fRec434[0] = (fConst23 * ((fRec435[0] - fRec435[1]) + fRec434[1]));
			iRec443[0] = ((int(((fTemp324 - fTemp323) < 0)))?(1 - iRec443[1]):iRec443[1]);
			float fTemp597 = (iRec443[0] + fTemp324);
			fVec78[0] = fTemp597;
			float fTemp598 = (0.5f * fVec78[1]);
			float fTemp599 = (0.5f * fVec78[0]);
			float fTemp600 = (1 + fTemp599);
			float fTemp601 = (fTemp600 - (fTemp598 + floorf((fTemp600 - fTemp598))));
			float fTemp602 = (0.5f * (1.0f + fVec78[0]));
			int iTemp603 = ((int((fTemp598 > fTemp599)))?1:((int(((fTemp602 - floorf(fTemp602)) < fTemp601)))?2:0));
			fRec441[0] = square_blep_x(iTemp603, ((int((fTemp599 < 0.5f)))?1.0f:-1.0f), fTemp599, fTemp601);
			float 	fRec442 = square_blep_prev(iTemp603, fRec441[1], fTemp598, fTemp601);
			fRec440[0] = (fRec440[1] + (fConst24 * (fRec442 - fRec440[1])));
			fRec439[0] = (fConst23 * ((fRec440[0] - fRec440[1]) + fRec439[1]));
			iRec448[0] = ((int(((fTemp522 - fTemp521) < 0)))?(1 - iRec448[1]):iRec448[1]);
			float fTemp604 = (iRec448[0] + fTemp522);
			fVec79[0] = fTemp604;
			float fTemp605 = (0.5f * fVec79[1]);
			float fTemp606 = (0.5f * fVec79[0]);
			float fTemp607 = (1 + fTemp606);
			float fTemp608 = (fTemp607 - (fTemp605 + floorf((fTemp607 - fTemp605))));
			float fTemp609 = (0.5f * (1.0f + fVec79[0]));
			int iTemp610 = ((int((fTemp605 > fTemp606)))?1:((int(((fTemp609 - floorf(fTemp609)) < fTemp608)))?2:0));
			fRec446[0] = square_blep_x(iTemp610, ((int((fTemp606 < 0.5f)))?1.0f:-1.0f), fTemp606, fTemp608);
			float 	fRec447 = square_blep_prev(iTemp610, fRec446[1], fTemp605, fTemp608);
			fRec445[0] = (fRec445[1] + (fConst24 * (fRec447 - fRec445[1])));
			fRec444[0] = (fConst23 * ((fRec445[0] - fRec445[1]) + fRec444[1]));
			iRec453[0] = ((int(((fTemp529 - fTemp528) < 0)))?(1 - iRec453[1]):iRec453[1]);
			float fTemp611 = (iRec453[0] + fTemp529);
			fVec80[0] = fTemp611;
			float fTemp612 = (0.5f * fVec80[1]);
			float fTemp613 = (0.5f * fVec80[0]);
			float fTemp614 = (1 + fTemp613);
			float fTemp615 = (fTemp614 - (fTemp612 + floorf((fTemp614 - fTemp612))));
			float fTemp616 = (0.5f * (1.0f + fVec80[0]));
			int iTemp617 = ((int((fTemp612 > fTemp613)))?1:((int(((fTemp616 - floorf(fTemp616)) < fTemp615)))?2:0));
			fRec451[0] = square_blep_x(iTemp617, ((int((fTemp613 < 0.5f)))?1.0f:-1.0f), fTemp613, fTemp615);
			float 	fRec452 = square_blep_prev(iTemp617, fRec451[1], fTemp612, fTemp615);
			fRec450[0] = (fRec450[1] + (fConst24 * (fRec452 - fRec450[1])));
			fRec449[0] = (fConst23 * ((fRec450[0] - fRec450[1]) + fRec449[1]));
			iRec458[0] = ((int(((fTemp536 - fTemp535) < 0)))?(1 - iRec458[1]):iRec458[1]);
			float fTemp618 = (iRec458[0] + fTemp536);
			fVec81[0] = fTemp618;
			float fTemp619 = (0.5f * fVec81[1]);
			float fTemp620 = (0.5f * fVec81[0]);
			float fTemp621 = (1 + fTemp620);
			float fTemp622 = (fTemp621 - (fTemp619 + floorf((fTemp621 - fTemp619))));
			float fTemp623 = (0.5f * (1.0f + fVec81[0]));
			int iTemp624 = ((int((fTemp619 > fTemp620)))?1:((int(((fTemp623 - floorf(fTemp623)) < fTemp622)))?2:0));
			fRec456[0] = square_blep_x(iTemp624, ((int((fTemp620 < 0.5f)))?1.0f:-1.0f), fTemp620, fTemp622);
			float 	fRec457 = square_blep_prev(iTemp624, fRec456[1], fTemp619, fTemp622);
			fRec455[0] = (fRec455[1] + (fConst24 * (fRec457 - fRec455[1])));
			fRec454[0] = (fConst23 * ((fRec455[0] - fRec455[1]) + fRec454[1]));
			iRec463[0] = ((int(((fTemp543 - fTemp542) < 0)))?(1 - iRec463[1]):iRec463[1]);
			float fTemp625 = (iRec463[0] + fTemp543);
			fVec82[0] = fTemp625;
			float fTemp626 = (0.5f * fVec82[1]);
			float fTemp627 = (0.5f * fVec82[0]);
			float fTemp628 = (1 + fTemp627);
			float fTemp629 = (fTemp628 - (fTemp626 + floorf((fTemp628 - fTemp626))));
			float fTemp630 = (0.5f * (1.0f + fVec82[0]));
			int iTemp631 = ((int((fTemp626 > fTemp627)))?1:((int(((fTemp630 - floorf(fTemp630)) < fTemp629)))?2:0));
			fRec461[0] = square_blep_x(iTemp631, ((int((fTemp627 < 0.5f)))?1.0f:-1.0f), fTemp627, fTemp629);
			float 	fRec462 = square_blep_prev(iTemp631, fRec461[1], fTemp626, fTemp629);
			fRec460[0] = (fRec460[1] + (fConst24 * (fRec462 - fRec460[1])));
			fRec459[0] = (fConst23 * ((fRec460[0] - fRec460[1]) + fRec459[1]));
			iRec468[0] = ((int(((fTemp550 - fTemp549) < 0)))?(1 - iRec468[1]):iRec468[1]);
			float fTemp632 = (iRec468[0] + fTemp550);
			fVec83[0] = fTemp632;
			float fTemp633 = (0.5f * fVec83[1]);
			float fTemp634 = (0.5f * fVec83[0]);
			float fTemp635 = (1 + fTemp634);
			float fTemp636 = (fTemp635 - (fTemp633 + floorf((fTemp635 - fTemp633))));
			float fTemp637 = (0.5f * (1.0f + fVec83[0]));
			int iTemp638 = ((int((fTemp633 > fTemp634)))?1:((int(((fTemp637 - floorf(fTemp637)) < fTemp636)))?2:0));
			fRec466[0] = square_blep_x(iTemp638, ((int((fTemp634 < 0.5f)))?1.0f:-1.0f), fTemp634, fTemp636);
			float 	fRec467 = square_blep_prev(iTemp638, fRec466[1], fTemp633, fTemp636);
			fRec465[0] = (fRec465[1] + (fConst24 * (fRec467 - fRec465[1])));
			fRec464[0] = (fConst23 * ((fRec465[0] - fRec465[1]) + fRec464[1]));
			float fTemp639 = (((((((((((((((((fSlow41 * fRec464[0]) + (fSlow40 * fRec459[0])) + (fSlow39 * fRec454[0])) + (fSlow38 * fRec449[0])) + (fSlow37 * fRec444[0])) + (fSlow36 * fRec439[0])) + (fSlow35 * fRec434[0])) + (fSlow34 * fRec429[0])) + (fSlow33 * fRec424[0])) + (fSlow32 * fRec419[0])) + (fSlow31 * fRec414[0])) + (fSlow30 * fRec409[0])) + (fSlow29 * fRec404[0])) + (fSlow28 * fRec399[0])) + (fSlow27 * fRec394[0])) + (fSlow26 * fRec389[0])) + (fSlow25 * fRec384[0]));
			float fTemp640 = ((fSlow43 * fTemp639) + ((fSlow76 * fRec131[0]) + ((fSlow72 * fRec136[0]) + ((fSlow69 * fRec141[0]) + ((fSlow66 * fRec146[0]) + ((fSlow63 * fRec151[0]) + ((fSlow60 * fRec156[0]) + ((fSlow57 * fRec161[0]) + ((fSlow54 * fRec166[0]) + ((fSlow51 * fRec171[0]) + ((fSlow48 * fRec176[0]) + ((fSlow45 * fRec181[0]) + ((fSlow4 * fRec186[0]) + ((fSlow75 * fRec191[0]) + ((fSlow71 * fRec380[0]) + ((fSlow68 * fRec376[0]) + ((fSlow65 * fRec372[0]) + ((fSlow62 * fRec368[0]) + ((fSlow59 * fRec364[0]) + ((fSlow56 * fRec360[0]) + ((fSlow53 * fRec356[0]) + ((fSlow50 * fRec352[0]) + ((fSlow47 * fRec348[0]) + ((fSlow44 * fRec344[0]) + ((fSlow3 * fRec340[0]) + ((fSlow74 * fRec336[0]) + ((fSlow24 * fRec332[0]) + ((fSlow23 * fRec328[0]) + ((fSlow22 * fRec324[0]) + ((fSlow21 * fRec320[0]) + ((fSlow20 * fRec316[0]) + ((fSlow19 * fRec312[0]) + ((fSlow18 * fRec308[0]) + ((fSlow17 * fRec302[0]) + ((fSlow16 * fRec296[0]) + ((fSlow15 * fRec290[0]) + ((fSlow14 * fRec284[0]) + ((fSlow13 * fRec278[0]) + ((fSlow12 * fRec271[0]) + ((fSlow11 * fRec264[0]) + ((fSlow10 * fRec257[0]) + ((fSlow9 * fRec250[0]) + ((fSlow8 * fRec243[0]) + ((fSlow7 * fRec236[0]) + (fSlow6 * fRec229[0])))))))))))))))))))))))))))))))))))))))))))));
			float fTemp641 = (fSlow43 * (((((((((((((((((fSlow41 * fRec316[0]) + (fSlow40 * fRec320[0])) + (fSlow39 * fRec324[0])) + (fSlow38 * fRec328[0])) + (fSlow37 * fRec332[0])) + (fSlow36 * fRec336[0])) + (fSlow35 * fRec340[0])) + (fSlow34 * fRec344[0])) + (fSlow33 * fRec348[0])) + (fSlow32 * fRec352[0])) + (fSlow31 * fRec356[0])) + (fSlow30 * fRec360[0])) + (fSlow29 * fRec364[0])) + (fSlow28 * fRec368[0])) + (fSlow27 * fRec372[0])) + (fSlow26 * fRec376[0])) + (fSlow25 * fRec380[0])));
			fRec470[0] = (fConst29 * (fRec470[1] + (iConst28 * faustpower<2>(fTemp301))));
			float fTemp642 = sqrtf(fRec470[0]);
			fVec84[0] = fTemp642;
			fRec469[0] = ((fConst25 * ((int((fVec84[0] > 1e-06f)))?((int((fVec84[1] < 1e-06f)))?1:0):0)) + (fConst26 * fRec469[1]));
			float fTemp643 = min(1.0f, (fConst30 * fRec469[0]));
			fVec85[0] = fTemp643;
			fRec471[0] = (fSlow79 + (0.98f * fRec471[1]));
			float fTemp644 = (((((((((((((((((fSlow41 * fRec278[0]) + (fSlow40 * fRec284[0])) + (fSlow39 * fRec290[0])) + (fSlow38 * fRec296[0])) + (fSlow37 * fRec302[0])) + (fSlow36 * fRec308[0])) + (fSlow35 * fRec312[0])) + (fSlow34 * fRec316[0])) + (fSlow33 * fRec320[0])) + (fSlow32 * fRec324[0])) + (fSlow31 * fRec328[0])) + (fSlow30 * fRec332[0])) + (fSlow29 * fRec336[0])) + (fSlow28 * fRec340[0])) + (fSlow27 * fRec344[0])) + (fSlow26 * fRec348[0])) + (fSlow25 * fRec352[0]));
			float fTemp645 = (((((((((((((((((fSlow41 * fRec404[0]) + (fSlow40 * fRec399[0])) + (fSlow39 * fRec394[0])) + (fSlow38 * fRec389[0])) + (fSlow37 * fRec384[0])) + (fSlow36 * fRec236[0])) + (fSlow35 * fRec229[0])) + (fSlow34 * fRec243[0])) + (fSlow33 * fRec250[0])) + (fSlow32 * fRec257[0])) + (fSlow31 * fRec264[0])) + (fSlow30 * fRec271[0])) + (fSlow29 * fRec278[0])) + (fSlow28 * fRec284[0])) + (fSlow27 * fRec290[0])) + (fSlow26 * fRec296[0])) + (fSlow25 * fRec302[0]));
			fRec472[0] = (fRec472[1] + (fConst31 * ((fSlow42 * ((fSlow83 * ((fTemp639 + (0.5f * fTemp645)) + (0.25f * fTemp644))) + (fSlow81 * (fTemp645 + (0.5f * fTemp644))))) - fRec472[1])));
			float fTemp646 = (fSlow86 * fTemp640);
			fVec86[0] = fTemp646;
			fRec474[0] = (fConst32 * ((fVec86[0] - fVec86[1]) + fRec474[1]));
			float fTemp647 = ((fSlow87 * fTemp640) + (0.5416666666666667f * fRec474[0]));
			fVec87[0] = fTemp647;
			fRec473[0] = (fConst33 * ((fVec87[0] - fVec87[1]) + fRec473[1]));
			float fTemp648 = ((fSlow43 * fTemp645) + ((fSlow76 * fRec54[0]) + ((fSlow72 * fRec47[0]) + ((fSlow69 * fRec40[0]) + ((fSlow66 * fRec33[0]) + ((fSlow63 * fRec26[0]) + ((fSlow60 * fRec19[0]) + ((fSlow57 * fRec5[0]) + ((fSlow54 * fRec12[0]) + ((fSlow51 * fRec111[0]) + ((fSlow48 * fRec116[0]) + ((fSlow45 * fRec121[0]) + ((fSlow4 * fRec126[0]) + ((fSlow75 * fRec131[0]) + ((fSlow71 * fRec136[0]) + ((fSlow68 * fRec141[0]) + ((fSlow65 * fRec146[0]) + ((fSlow62 * fRec151[0]) + ((fSlow59 * fRec156[0]) + ((fSlow56 * fRec161[0]) + ((fSlow53 * fRec166[0]) + ((fSlow50 * fRec171[0]) + ((fSlow47 * fRec176[0]) + ((fSlow44 * fRec181[0]) + ((fSlow3 * fRec186[0]) + ((fSlow74 * fRec191[0]) + ((fSlow24 * fRec380[0]) + ((fSlow23 * fRec376[0]) + ((fSlow22 * fRec372[0]) + ((fSlow21 * fRec368[0]) + ((fSlow20 * fRec364[0]) + ((fSlow19 * fRec360[0]) + ((fSlow18 * fRec356[0]) + ((fSlow17 * fRec352[0]) + ((fSlow16 * fRec348[0]) + ((fSlow15 * fRec344[0]) + ((fSlow14 * fRec340[0]) + ((fSlow13 * fRec336[0]) + ((fSlow12 * fRec332[0]) + ((fSlow11 * fRec328[0]) + ((fSlow10 * fRec324[0]) + ((fSlow9 * fRec320[0]) + ((fSlow8 * fRec316[0]) + ((fSlow7 * fRec308[0]) + (fSlow6 * fRec312[0])))))))))))))))))))))))))))))))))))))))))))));
			float fTemp649 = (fSlow89 * fTemp648);
			fVec88[0] = fTemp649;
			fRec476[0] = (fConst34 * ((fVec88[0] - fVec88[1]) + fRec476[1]));
			float fTemp650 = ((fSlow90 * fTemp648) + (0.5416666666666667f * fRec476[0]));
			fVec89[0] = fTemp650;
			fRec475[0] = (fConst35 * ((fVec89[0] - fVec89[1]) + fRec475[1]));
			float fTemp651 = ((fSlow43 * fTemp644) + ((fSlow72 * fRec107[0]) + ((fSlow69 * fRec103[0]) + ((fSlow66 * fRec99[0]) + ((fSlow63 * fRec95[0]) + ((fSlow60 * fRec91[0]) + ((fSlow57 * fRec87[0]) + ((fSlow54 * fRec83[0]) + ((fSlow51 * fRec77[0]) + ((fSlow48 * fRec71[0]) + ((fSlow45 * fRec65[0]) + ((fSlow4 * fRec60[0]) + ((fSlow75 * fRec54[0]) + ((fSlow71 * fRec47[0]) + ((fSlow68 * fRec40[0]) + ((fSlow65 * fRec33[0]) + ((fSlow62 * fRec26[0]) + ((fSlow59 * fRec19[0]) + ((fSlow56 * fRec5[0]) + ((fSlow53 * fRec12[0]) + ((fSlow50 * fRec111[0]) + ((fSlow47 * fRec116[0]) + ((fSlow44 * fRec121[0]) + ((fSlow3 * fRec126[0]) + ((fSlow74 * fRec131[0]) + ((fSlow24 * fRec136[0]) + ((fSlow23 * fRec141[0]) + ((fSlow22 * fRec146[0]) + ((fSlow21 * fRec151[0]) + ((fSlow20 * fRec156[0]) + ((fSlow19 * fRec161[0]) + ((fSlow18 * fRec166[0]) + ((fSlow17 * fRec171[0]) + ((fSlow16 * fRec176[0]) + ((fSlow15 * fRec181[0]) + ((fSlow14 * fRec186[0]) + ((fSlow13 * fRec191[0]) + ((fSlow12 * fRec380[0]) + ((fSlow11 * fRec376[0]) + ((fSlow10 * fRec372[0]) + ((fSlow9 * fRec368[0]) + ((fSlow8 * fRec364[0]) + ((fSlow6 * fRec360[0]) + ((fSlow76 * fRec226[0]) + (fSlow7 * fRec356[0])))))))))))))))))))))))))))))))))))))))))))));
			float fTemp652 = (fSlow92 * fTemp651);
			fVec90[0] = fTemp652;
			fRec478[0] = (fConst36 * ((fVec90[0] - fVec90[1]) + fRec478[1]));
			float fTemp653 = ((fSlow93 * fTemp651) + (0.5416666666666667f * fRec478[0]));
			fVec91[0] = fTemp653;
			fRec477[0] = (fConst37 * ((fVec91[0] - fVec91[1]) + fRec477[1]));
			float fTemp654 = ((fSlow94 * fRec226[0]) + ((fSlow43 * (((((((((((((((((fSlow41 * fRec336[0]) + (fSlow40 * fRec340[0])) + (fSlow39 * fRec344[0])) + (fSlow38 * fRec348[0])) + (fSlow37 * fRec352[0])) + (fSlow36 * fRec356[0])) + (fSlow35 * fRec360[0])) + (fSlow34 * fRec364[0])) + (fSlow33 * fRec368[0])) + (fSlow32 * fRec372[0])) + (fSlow31 * fRec376[0])) + (fSlow30 * fRec380[0])) + (fSlow29 * fRec191[0])) + (fSlow28 * fRec186[0])) + (fSlow27 * fRec181[0])) + (fSlow26 * fRec176[0])) + (fSlow25 * fRec171[0]))) + ((fSlow71 * fRec107[0]) + ((fSlow68 * fRec103[0]) + ((fSlow65 * fRec99[0]) + ((fSlow62 * fRec95[0]) + ((fSlow59 * fRec91[0]) + ((fSlow56 * fRec87[0]) + ((fSlow53 * fRec83[0]) + ((fSlow50 * fRec77[0]) + ((fSlow47 * fRec71[0]) + ((fSlow44 * fRec65[0]) + ((fSlow3 * fRec60[0]) + ((fSlow74 * fRec54[0]) + ((fSlow24 * fRec47[0]) + ((fSlow23 * fRec40[0]) + ((fSlow22 * fRec33[0]) + ((fSlow21 * fRec26[0]) + ((fSlow20 * fRec19[0]) + ((fSlow19 * fRec5[0]) + ((fSlow18 * fRec12[0]) + ((fSlow17 * fRec111[0]) + ((fSlow16 * fRec116[0]) + ((fSlow15 * fRec121[0]) + ((fSlow14 * fRec126[0]) + ((fSlow13 * fRec131[0]) + ((fSlow12 * fRec136[0]) + ((fSlow11 * fRec141[0]) + ((fSlow10 * fRec146[0]) + ((fSlow9 * fRec151[0]) + ((fSlow8 * fRec156[0]) + ((fSlow6 * fRec161[0]) + ((fSlow7 * fRec166[0]) + ((fSlow72 * fRec223[0]) + ((fSlow69 * fRec220[0]) + ((fSlow66 * fRec217[0]) + ((fSlow63 * fRec214[0]) + ((fSlow60 * fRec211[0]) + ((fSlow57 * fRec208[0]) + ((fSlow54 * fRec205[0]) + ((fSlow51 * fRec202[0]) + ((fSlow48 * fRec199[0]) + ((fSlow4 * fRec0[0]) + (fSlow45 * fRec196[0]))))))))))))))))))))))))))))))))))))))))))));
			float fTemp655 = (fSlow96 * fTemp654);
			fVec92[0] = fTemp655;
			fRec480[0] = (fConst38 * ((fVec92[0] - fVec92[1]) + fRec480[1]));
			float fTemp656 = ((fSlow97 * fTemp654) + (0.5416666666666667f * fRec480[0]));
			fVec93[0] = fTemp656;
			fRec479[0] = (fConst39 * ((fVec93[0] - fVec93[1]) + fRec479[1]));
			fRec482[0] = (fRec482[1] + (fConst20 * (fVec86[0] - fRec482[1])));
			fRec481[0] = (fRec481[1] + (fConst20 * (fRec482[0] - fRec481[1])));
			fRec484[0] = (fRec484[1] + (fConst12 * (fVec88[0] - fRec484[1])));
			fRec483[0] = (fRec483[1] + (fConst12 * (fRec484[0] - fRec483[1])));
			fRec486[0] = (fRec486[1] + (fConst9 * (fVec90[0] - fRec486[1])));
			fRec485[0] = (fRec485[1] + (fConst9 * (fRec486[0] - fRec485[1])));
			fRec488[0] = (fRec488[1] + (fConst6 * (fVec92[0] - fRec488[1])));
			fRec487[0] = (fRec487[1] + (fConst6 * (fRec488[0] - fRec487[1])));
			fRec489[0] = (fSlow118 + (0.98f * fRec489[1]));
			output0[i] = (FAUSTFLOAT)((0.001f + (0.05f * fRec489[0])) * ((fSlow117 * ((fSlow116 * fTemp301) + ((fSlow114 * ((fSlow94 * fRec202[0]) + ((fSlow73 * fRec199[0]) + ((fSlow70 * fRec196[0]) + ((fSlow67 * fRec0[0]) + ((fSlow64 * fRec226[0]) + ((fSlow43 * (((((((((((((((((fSlow41 * fRec352[0]) + (fSlow40 * fRec356[0])) + (fSlow39 * fRec360[0])) + (fSlow38 * fRec364[0])) + (fSlow37 * fRec368[0])) + (fSlow36 * fRec372[0])) + (fSlow35 * fRec376[0])) + (fSlow34 * fRec380[0])) + (fSlow33 * fRec191[0])) + (fSlow32 * fRec186[0])) + (fSlow31 * fRec181[0])) + (fSlow30 * fRec176[0])) + (fSlow29 * fRec171[0])) + (fSlow28 * fRec166[0])) + (fSlow27 * fRec161[0])) + (fSlow26 * fRec156[0])) + (fSlow25 * fRec151[0]))) + ((fSlow60 * fRec223[0]) + ((fSlow57 * fRec220[0]) + ((fSlow54 * fRec217[0]) + ((fSlow51 * fRec214[0]) + ((fSlow48 * fRec211[0]) + ((fSlow45 * fRec208[0]) + ((fSlow4 * fRec205[0]) + ((fSlow59 * fRec107[0]) + ((fSlow56 * fRec103[0]) + ((fSlow53 * fRec99[0]) + ((fSlow50 * fRec95[0]) + ((fSlow47 * fRec91[0]) + ((fSlow44 * fRec87[0]) + ((fSlow3 * fRec83[0]) + ((fSlow74 * fRec77[0]) + ((fSlow24 * fRec71[0]) + ((fSlow23 * fRec65[0]) + ((fSlow22 * fRec60[0]) + ((fSlow21 * fRec54[0]) + ((fSlow20 * fRec47[0]) + ((fSlow19 * fRec40[0]) + ((fSlow18 * fRec33[0]) + ((fSlow17 * fRec26[0]) + ((fSlow16 * fRec19[0]) + ((fSlow15 * fRec5[0]) + ((fSlow14 * fRec12[0]) + ((fSlow13 * fRec111[0]) + ((fSlow12 * fRec116[0]) + ((fSlow11 * fRec121[0]) + ((fSlow10 * fRec126[0]) + ((fSlow9 * fRec131[0]) + ((fSlow8 * fRec136[0]) + ((fSlow7 * fRec146[0]) + (fSlow6 * fRec141[0]))))))))))))))))))))))))))))))))))))))))) + ((fSlow112 * fTemp654) + ((fSlow110 * (fTemp641 + fTemp302)) + ((fSlow108 * fTemp651) + ((fSlow106 * fTemp640) + (fSlow104 * fTemp648)))))))) + ((fSlow102 * ((fSlow100 * (((fRec487[0] + fRec485[0]) + fRec483[0]) + fRec481[0])) + (fSlow99 * (((fRec479[0] + fRec477[0]) + fRec475[0]) + fRec473[0])))) + ((fRec472[0] * (0.5f + (4.5f * fRec471[0]))) + (fSlow78 * (max(0.01357f, (0.25f * (fVec85[4] + (fVec85[3] + (fVec85[0] + fVec85[2]))))) * (fTemp641 + ((0.8395f * fTemp640) + (fTemp302 + (0.25f * fTemp301))))))))));
			// post processing
			fRec489[1] = fRec489[0];
			fRec487[1] = fRec487[0];
			fRec488[1] = fRec488[0];
			fRec485[1] = fRec485[0];
			fRec486[1] = fRec486[0];
			fRec483[1] = fRec483[0];
			fRec484[1] = fRec484[0];
			fRec481[1] = fRec481[0];
			fRec482[1] = fRec482[0];
			fRec479[1] = fRec479[0];
			fVec93[1] = fVec93[0];
			fRec480[1] = fRec480[0];
			fVec92[1] = fVec92[0];
			fRec477[1] = fRec477[0];
			fVec91[1] = fVec91[0];
			fRec478[1] = fRec478[0];
			fVec90[1] = fVec90[0];
			fRec475[1] = fRec475[0];
			fVec89[1] = fVec89[0];
			fRec476[1] = fRec476[0];
			fVec88[1] = fVec88[0];
			fRec473[1] = fRec473[0];
			fVec87[1] = fVec87[0];
			fRec474[1] = fRec474[0];
			fVec86[1] = fVec86[0];
			fRec472[1] = fRec472[0];
			fRec471[1] = fRec471[0];
			for (int i=4; i>0; i--) fVec85[i] = fVec85[i-1];
			fRec469[1] = fRec469[0];
			fVec84[1] = fVec84[0];
			fRec470[1] = fRec470[0];
			fRec464[1] = fRec464[0];
			fRec465[1] = fRec465[0];
			fRec466[1] = fRec466[0];
			fVec83[1] = fVec83[0];
			iRec468[1] = iRec468[0];
			fRec459[1] = fRec459[0];
			fRec460[1] = fRec460[0];
			fRec461[1] = fRec461[0];
			fVec82[1] = fVec82[0];
			iRec463[1] = iRec463[0];
			fRec454[1] = fRec454[0];
			fRec455[1] = fRec455[0];
			fRec456[1] = fRec456[0];
			fVec81[1] = fVec81[0];
			iRec458[1] = iRec458[0];
			fRec449[1] = fRec449[0];
			fRec450[1] = fRec450[0];
			fRec451[1] = fRec451[0];
			fVec80[1] = fVec80[0];
			iRec453[1] = iRec453[0];
			fRec444[1] = fRec444[0];
			fRec445[1] = fRec445[0];
			fRec446[1] = fRec446[0];
			fVec79[1] = fVec79[0];
			iRec448[1] = iRec448[0];
			fRec439[1] = fRec439[0];
			fRec440[1] = fRec440[0];
			fRec441[1] = fRec441[0];
			fVec78[1] = fVec78[0];
			iRec443[1] = iRec443[0];
			fRec434[1] = fRec434[0];
			fRec435[1] = fRec435[0];
			fRec436[1] = fRec436[0];
			fVec77[1] = fVec77[0];
			iRec438[1] = iRec438[0];
			fRec429[1] = fRec429[0];
			fRec430[1] = fRec430[0];
			fRec431[1] = fRec431[0];
			fVec76[1] = fVec76[0];
			iRec433[1] = iRec433[0];
			fRec424[1] = fRec424[0];
			fRec425[1] = fRec425[0];
			fRec426[1] = fRec426[0];
			fVec75[1] = fVec75[0];
			iRec428[1] = iRec428[0];
			fRec419[1] = fRec419[0];
			fRec420[1] = fRec420[0];
			fRec421[1] = fRec421[0];
			fVec74[1] = fVec74[0];
			iRec423[1] = iRec423[0];
			fRec414[1] = fRec414[0];
			fRec415[1] = fRec415[0];
			fRec416[1] = fRec416[0];
			fVec73[1] = fVec73[0];
			iRec418[1] = iRec418[0];
			fRec409[1] = fRec409[0];
			fRec410[1] = fRec410[0];
			fRec411[1] = fRec411[0];
			fVec72[1] = fVec72[0];
			iRec413[1] = iRec413[0];
			fRec404[1] = fRec404[0];
			fRec405[1] = fRec405[0];
			fRec406[1] = fRec406[0];
			fVec71[1] = fVec71[0];
			iRec408[1] = iRec408[0];
			fRec399[1] = fRec399[0];
			fRec400[1] = fRec400[0];
			fRec401[1] = fRec401[0];
			fVec70[1] = fVec70[0];
			iRec403[1] = iRec403[0];
			fRec394[1] = fRec394[0];
			fRec395[1] = fRec395[0];
			fRec396[1] = fRec396[0];
			fVec69[1] = fVec69[0];
			iRec398[1] = iRec398[0];
			fRec389[1] = fRec389[0];
			fRec390[1] = fRec390[0];
			fRec391[1] = fRec391[0];
			fVec68[1] = fVec68[0];
			iRec393[1] = iRec393[0];
			fRec384[1] = fRec384[0];
			fRec385[1] = fRec385[0];
			fRec386[1] = fRec386[0];
			fVec67[1] = fVec67[0];
			iRec388[1] = iRec388[0];
			fRec380[1] = fRec380[0];
			fRec381[1] = fRec381[0];
			fRec382[1] = fRec382[0];
			fRec376[1] = fRec376[0];
			fRec377[1] = fRec377[0];
			fRec378[1] = fRec378[0];
			fRec372[1] = fRec372[0];
			fRec373[1] = fRec373[0];
			fRec374[1] = fRec374[0];
			fRec368[1] = fRec368[0];
			fRec369[1] = fRec369[0];
			fRec370[1] = fRec370[0];
			fRec364[1] = fRec364[0];
			fRec365[1] = fRec365[0];
			fRec366[1] = fRec366[0];
			fRec360[1] = fRec360[0];
			fRec361[1] = fRec361[0];
			fRec362[1] = fRec362[0];
			fRec356[1] = fRec356[0];
			fRec357[1] = fRec357[0];
			fRec358[1] = fRec358[0];
			fRec352[1] = fRec352[0];
			fRec353[1] = fRec353[0];
			fRec354[1] = fRec354[0];
			fRec348[1] = fRec348[0];
			fRec349[1] = fRec349[0];
			fRec350[1] = fRec350[0];
			fRec344[1] = fRec344[0];
			fRec345[1] = fRec345[0];
			fRec346[1] = fRec346[0];
			fRec340[1] = fRec340[0];
			fRec341[1] = fRec341[0];
			fRec342[1] = fRec342[0];
			fRec336[1] = fRec336[0];
			fRec337[1] = fRec337[0];
			fRec338[1] = fRec338[0];
			fRec332[1] = fRec332[0];
			fRec333[1] = fRec333[0];
			fRec334[1] = fRec334[0];
			fRec328[1] = fRec328[0];
			fRec329[1] = fRec329[0];
			fRec330[1] = fRec330[0];
			fRec324[1] = fRec324[0];
			fRec325[1] = fRec325[0];
			fRec326[1] = fRec326[0];
			fRec320[1] = fRec320[0];
			fRec321[1] = fRec321[0];
			fRec322[1] = fRec322[0];
			fRec316[1] = fRec316[0];
			fRec317[1] = fRec317[0];
			fRec318[1] = fRec318[0];
			fRec312[1] = fRec312[0];
			fRec313[1] = fRec313[0];
			fRec314[1] = fRec314[0];
			fRec308[1] = fRec308[0];
			fRec309[1] = fRec309[0];
			fRec310[1] = fRec310[0];
			fRec302[1] = fRec302[0];
			fRec303[1] = fRec303[0];
			fRec304[1] = fRec304[0];
			fVec66[1] = fVec66[0];
			iRec307[1] = iRec307[0];
			fVec65[1] = fVec65[0];
			iRec306[1] = iRec306[0];
			fRec296[1] = fRec296[0];
			fRec297[1] = fRec297[0];
			fRec298[1] = fRec298[0];
			fVec64[1] = fVec64[0];
			iRec301[1] = iRec301[0];
			fVec63[1] = fVec63[0];
			iRec300[1] = iRec300[0];
			fRec290[1] = fRec290[0];
			fRec291[1] = fRec291[0];
			fRec292[1] = fRec292[0];
			fVec62[1] = fVec62[0];
			iRec295[1] = iRec295[0];
			fVec61[1] = fVec61[0];
			iRec294[1] = iRec294[0];
			fRec284[1] = fRec284[0];
			fRec285[1] = fRec285[0];
			fRec286[1] = fRec286[0];
			fVec60[1] = fVec60[0];
			iRec289[1] = iRec289[0];
			fVec59[1] = fVec59[0];
			iRec288[1] = iRec288[0];
			fRec278[1] = fRec278[0];
			fRec279[1] = fRec279[0];
			fRec280[1] = fRec280[0];
			fVec58[1] = fVec58[0];
			iRec283[1] = iRec283[0];
			fVec57[1] = fVec57[0];
			iRec282[1] = iRec282[0];
			fRec271[1] = fRec271[0];
			fRec272[1] = fRec272[0];
			fRec273[1] = fRec273[0];
			fVec56[1] = fVec56[0];
			iRec277[1] = iRec277[0];
			fVec55[1] = fVec55[0];
			iRec276[1] = iRec276[0];
			fVec54[1] = fVec54[0];
			iRec275[1] = iRec275[0];
			fRec264[1] = fRec264[0];
			fRec265[1] = fRec265[0];
			fRec266[1] = fRec266[0];
			fVec53[1] = fVec53[0];
			iRec270[1] = iRec270[0];
			fVec52[1] = fVec52[0];
			iRec269[1] = iRec269[0];
			fVec51[1] = fVec51[0];
			iRec268[1] = iRec268[0];
			fRec257[1] = fRec257[0];
			fRec258[1] = fRec258[0];
			fRec259[1] = fRec259[0];
			fVec50[1] = fVec50[0];
			iRec263[1] = iRec263[0];
			fVec49[1] = fVec49[0];
			iRec262[1] = iRec262[0];
			fVec48[1] = fVec48[0];
			iRec261[1] = iRec261[0];
			fRec250[1] = fRec250[0];
			fRec251[1] = fRec251[0];
			fRec252[1] = fRec252[0];
			fVec47[1] = fVec47[0];
			iRec256[1] = iRec256[0];
			fVec46[1] = fVec46[0];
			iRec255[1] = iRec255[0];
			fVec45[1] = fVec45[0];
			iRec254[1] = iRec254[0];
			fRec243[1] = fRec243[0];
			fRec244[1] = fRec244[0];
			fRec245[1] = fRec245[0];
			fVec44[1] = fVec44[0];
			iRec249[1] = iRec249[0];
			fVec43[1] = fVec43[0];
			iRec248[1] = iRec248[0];
			fVec42[1] = fVec42[0];
			iRec247[1] = iRec247[0];
			fRec236[1] = fRec236[0];
			fRec237[1] = fRec237[0];
			fRec238[1] = fRec238[0];
			fVec41[1] = fVec41[0];
			iRec242[1] = iRec242[0];
			fVec40[1] = fVec40[0];
			iRec241[1] = iRec241[0];
			fVec39[1] = fVec39[0];
			iRec240[1] = iRec240[0];
			fRec229[1] = fRec229[0];
			fRec230[1] = fRec230[0];
			fRec231[1] = fRec231[0];
			fVec38[1] = fVec38[0];
			iRec235[1] = iRec235[0];
			fVec37[1] = fVec37[0];
			iRec234[1] = iRec234[0];
			fVec36[1] = fVec36[0];
			iRec233[1] = iRec233[0];
			fRec226[1] = fRec226[0];
			fRec228[1] = fRec228[0];
			fRec227[1] = fRec227[0];
			fRec223[1] = fRec223[0];
			fRec225[1] = fRec225[0];
			fRec224[1] = fRec224[0];
			fRec220[1] = fRec220[0];
			fRec222[1] = fRec222[0];
			fRec221[1] = fRec221[0];
			fRec217[1] = fRec217[0];
			fRec219[1] = fRec219[0];
			fRec218[1] = fRec218[0];
			fRec214[1] = fRec214[0];
			fRec216[1] = fRec216[0];
			fRec215[1] = fRec215[0];
			fRec211[1] = fRec211[0];
			fRec213[1] = fRec213[0];
			fRec212[1] = fRec212[0];
			fRec208[1] = fRec208[0];
			fRec210[1] = fRec210[0];
			fRec209[1] = fRec209[0];
			fRec205[1] = fRec205[0];
			fRec207[1] = fRec207[0];
			fRec206[1] = fRec206[0];
			fRec202[1] = fRec202[0];
			fRec204[1] = fRec204[0];
			fRec203[1] = fRec203[0];
			fRec199[1] = fRec199[0];
			fRec201[1] = fRec201[0];
			fRec200[1] = fRec200[0];
			fRec196[1] = fRec196[0];
			fRec198[1] = fRec198[0];
			fRec197[1] = fRec197[0];
			fRec191[1] = fRec191[0];
			fRec192[1] = fRec192[0];
			fRec193[1] = fRec193[0];
			fVec35[1] = fVec35[0];
			iRec195[1] = iRec195[0];
			fRec186[1] = fRec186[0];
			fRec187[1] = fRec187[0];
			fRec188[1] = fRec188[0];
			fVec34[1] = fVec34[0];
			iRec190[1] = iRec190[0];
			fRec181[1] = fRec181[0];
			fRec182[1] = fRec182[0];
			fRec183[1] = fRec183[0];
			fVec33[1] = fVec33[0];
			iRec185[1] = iRec185[0];
			fRec176[1] = fRec176[0];
			fRec177[1] = fRec177[0];
			fRec178[1] = fRec178[0];
			fVec32[1] = fVec32[0];
			iRec180[1] = iRec180[0];
			fRec171[1] = fRec171[0];
			fRec172[1] = fRec172[0];
			fRec173[1] = fRec173[0];
			fVec31[1] = fVec31[0];
			iRec175[1] = iRec175[0];
			fRec166[1] = fRec166[0];
			fRec167[1] = fRec167[0];
			fRec168[1] = fRec168[0];
			fVec30[1] = fVec30[0];
			iRec170[1] = iRec170[0];
			fRec161[1] = fRec161[0];
			fRec162[1] = fRec162[0];
			fRec163[1] = fRec163[0];
			fVec29[1] = fVec29[0];
			iRec165[1] = iRec165[0];
			fRec156[1] = fRec156[0];
			fRec157[1] = fRec157[0];
			fRec158[1] = fRec158[0];
			fVec28[1] = fVec28[0];
			iRec160[1] = iRec160[0];
			fRec151[1] = fRec151[0];
			fRec152[1] = fRec152[0];
			fRec153[1] = fRec153[0];
			fVec27[1] = fVec27[0];
			iRec155[1] = iRec155[0];
			fRec146[1] = fRec146[0];
			fRec147[1] = fRec147[0];
			fRec148[1] = fRec148[0];
			fVec26[1] = fVec26[0];
			iRec150[1] = iRec150[0];
			fRec141[1] = fRec141[0];
			fRec142[1] = fRec142[0];
			fRec143[1] = fRec143[0];
			fVec25[1] = fVec25[0];
			iRec145[1] = iRec145[0];
			fRec136[1] = fRec136[0];
			fRec137[1] = fRec137[0];
			fRec138[1] = fRec138[0];
			fVec24[1] = fVec24[0];
			iRec140[1] = iRec140[0];
			fRec131[1] = fRec131[0];
			fRec132[1] = fRec132[0];
			fRec133[1] = fRec133[0];
			fVec23[1] = fVec23[0];
			iRec135[1] = iRec135[0];
			fRec126[1] = fRec126[0];
			fRec127[1] = fRec127[0];
			fRec128[1] = fRec128[0];
			fVec22[1] = fVec22[0];
			iRec130[1] = iRec130[0];
			fRec121[1] = fRec121[0];
			fRec122[1] = fRec122[0];
			fRec123[1] = fRec123[0];
			fVec21[1] = fVec21[0];
			iRec125[1] = iRec125[0];
			fRec116[1] = fRec116[0];
			fRec117[1] = fRec117[0];
			fRec118[1] = fRec118[0];
			fVec20[1] = fVec20[0];
			iRec120[1] = iRec120[0];
			fRec111[1] = fRec111[0];
			fRec112[1] = fRec112[0];
			fRec113[1] = fRec113[0];
			fVec19[1] = fVec19[0];
			iRec115[1] = iRec115[0];
			fRec107[1] = fRec107[0];
			fRec108[1] = fRec108[0];
			fRec109[1] = fRec109[0];
			fRec103[1] = fRec103[0];
			fRec104[1] = fRec104[0];
			fRec105[1] = fRec105[0];
			fRec99[1] = fRec99[0];
			fRec100[1] = fRec100[0];
			fRec101[1] = fRec101[0];
			fRec95[1] = fRec95[0];
			fRec96[1] = fRec96[0];
			fRec97[1] = fRec97[0];
			fRec91[1] = fRec91[0];
			fRec92[1] = fRec92[0];
			fRec93[1] = fRec93[0];
			fRec87[1] = fRec87[0];
			fRec88[1] = fRec88[0];
			fRec89[1] = fRec89[0];
			fRec83[1] = fRec83[0];
			fRec84[1] = fRec84[0];
			fRec85[1] = fRec85[0];
			fRec77[1] = fRec77[0];
			fRec78[1] = fRec78[0];
			fRec79[1] = fRec79[0];
			fVec18[1] = fVec18[0];
			iRec81[1] = iRec81[0];
			fRec82[1] = fRec82[0];
			fRec71[1] = fRec71[0];
			fRec72[1] = fRec72[0];
			fRec73[1] = fRec73[0];
			fVec17[1] = fVec17[0];
			iRec75[1] = iRec75[0];
			fRec76[1] = fRec76[0];
			fRec65[1] = fRec65[0];
			fRec66[1] = fRec66[0];
			fRec67[1] = fRec67[0];
			fVec16[1] = fVec16[0];
			iRec69[1] = iRec69[0];
			fRec70[1] = fRec70[0];
			fRec60[1] = fRec60[0];
			fRec61[1] = fRec61[0];
			fRec62[1] = fRec62[0];
			fVec15[1] = fVec15[0];
			iRec64[1] = iRec64[0];
			fRec54[1] = fRec54[0];
			fRec55[1] = fRec55[0];
			fRec56[1] = fRec56[0];
			fVec14[1] = fVec14[0];
			iRec58[1] = iRec58[0];
			fRec59[1] = fRec59[0];
			fRec47[1] = fRec47[0];
			fRec48[1] = fRec48[0];
			fRec49[1] = fRec49[0];
			fVec13[1] = fVec13[0];
			iRec53[1] = iRec53[0];
			fVec12[1] = fVec12[0];
			iRec51[1] = iRec51[0];
			fRec52[1] = fRec52[0];
			fRec40[1] = fRec40[0];
			fRec41[1] = fRec41[0];
			fRec42[1] = fRec42[0];
			fVec11[1] = fVec11[0];
			iRec46[1] = iRec46[0];
			fVec10[1] = fVec10[0];
			iRec44[1] = iRec44[0];
			fRec45[1] = fRec45[0];
			fRec33[1] = fRec33[0];
			fRec34[1] = fRec34[0];
			fRec35[1] = fRec35[0];
			fVec9[1] = fVec9[0];
			iRec39[1] = iRec39[0];
			fVec8[1] = fVec8[0];
			iRec37[1] = iRec37[0];
			fRec38[1] = fRec38[0];
			fRec26[1] = fRec26[0];
			fRec27[1] = fRec27[0];
			fRec28[1] = fRec28[0];
			fVec7[1] = fVec7[0];
			iRec32[1] = iRec32[0];
			fVec6[1] = fVec6[0];
			iRec30[1] = iRec30[0];
			fRec31[1] = fRec31[0];
			fRec19[1] = fRec19[0];
			fRec20[1] = fRec20[0];
			fRec21[1] = fRec21[0];
			fVec5[1] = fVec5[0];
			iRec25[1] = iRec25[0];
			fVec4[1] = fVec4[0];
			iRec23[1] = iRec23[0];
			fRec24[1] = fRec24[0];
			fRec12[1] = fRec12[0];
			fRec13[1] = fRec13[0];
			fRec14[1] = fRec14[0];
			fVec3[1] = fVec3[0];
			iRec18[1] = iRec18[0];
			fVec2[1] = fVec2[0];
			iRec16[1] = iRec16[0];
			fRec17[1] = fRec17[0];
			fRec5[1] = fRec5[0];
			fRec6[1] = fRec6[0];
			fRec7[1] = fRec7[0];
			fVec1[1] = fVec1[0];
			iRec11[1] = iRec11[0];
			fVec0[1] = fVec0[0];
			iRec9[1] = iRec9[0];
			fRec10[1] = fRec10[0];
			fRec0[1] = fRec0[0];
			fRec2[1] = fRec2[0];
			fRec1[1] = fRec1[0];
			fRec3[1] = fRec3[0];
			fRec4[1] = fRec4[0];
		}
	}
};


